<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2022-2639</title>
    <url>/2022/12/02/CVE-2022-2639/</url>
    <content><![CDATA[<p>cve-2022-2639 openvswitch 模块 kmalloc-0x10000 堆溢出利用。</p>
<span id="more"></span>

<h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>整体源码可以用 si 载入，两边同时看整体逻辑和函数实现比较方便。然后add all，这时候只需要add第一层就行了，不要选下面的，否则 si 就会因为源代码过多而分析不了寄掉。</p>
<p><img src="/img/CVE-2022-2639/1.png" alt="image"></p>
<p>然后根据想要阅读的位置，选择那个对应的小文件夹，然后递归的add所有文件，也就是上面的第二个对号要打上。如果碰到找不到的结构体或者其他定义，可以通过这个在线的 source 找到对应关系，然后再回到 si 中 add 该路径下的文件。这样在 si 中就能找到了。如： <a href="https://elixir.bootlin.com/linux/v5.13/C/ident/nlattr">nlattr</a> 。</p>
<p>找到定义的 nlattr：</p>
<p><img src="/img/CVE-2022-2639/2.png" alt="nlattr"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>查看 patch:</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/net/openvswitch/flow_netlink.c b/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="comment">index 7176156d38443c..4c09cf8a0ab2dc 100644</span></span><br><span class="line"><span class="comment">--- a/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="comment">+++ b/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="meta">@@ -2465,7 +2465,7 @@</span> static struct nlattr *reserve_sfa_size(struct sw_flow_actions **sfa,</span><br><span class="line"> 	new_acts_size = max(next_offset + req_size, ksize(*sfa) * 2);</span><br><span class="line"> </span><br><span class="line"> 	if (new_acts_size &gt; MAX_ACTIONS_BUFSIZE) &#123;</span><br><span class="line"><span class="deletion">-		if ((MAX_ACTIONS_BUFSIZE - next_offset) &lt; req_size) &#123;</span></span><br><span class="line"><span class="addition">+		if ((next_offset + req_size) &gt; MAX_ACTIONS_BUFSIZE) &#123;</span></span><br><span class="line"> 			OVS_NLERR(log, &quot;Flow action size exceeds max %u&quot;,</span><br><span class="line"> 				  MAX_ACTIONS_BUFSIZE);</span><br><span class="line"> 			return ERR_PTR(-EMSGSIZE);</span><br></pre></td></tr></table></figure>



<h2 id="reserve-sfa-size"><a href="#reserve-sfa-size" class="headerlink" title="reserve_sfa_size"></a>reserve_sfa_size</h2><p>找到对应函数，看一下漏洞成因：</p>
<p><img src="/img/CVE-2022-2639/3.png" alt="3"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ACTIONS_BUFSIZE	(32 * 1024)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> next_offset = offsetof(<span class="keyword">struct</span> sw_flow_actions, actions) + (*sfa)-&gt;actions_len;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> req_size = NLA_ALIGN(attr_len);</span><br></pre></td></tr></table></figure>

<p>可以注意到图中红色框内代码中，等式左边 <code>next_offset</code> 为有符号数，而右边的 <code>req_size</code> 为无符号数。左侧相减后如果结果为负数，<strong>则在与无符号比较时会被强制转换为无符号数而变成非常大的正数</strong>，从而绕过下面的 exceeds 的 check 继续下面的逻辑。</p>
<p><code>MAX_ACTIONS_BUFSIZE</code> 为 0x8000，所以当 <code>next_offset</code> 的值大于该值时，就会发生前面提到的情况。</p>
<p>继续向下分析。</p>
<p>① <code>new_acts_size</code> &#x3D; <code>MAX_ACTIONS_BUFSIZE</code>	&#x3D; 0x8000，2362行根据该 size 进行 <code>alloc</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> sw_flow_actions *<span class="title function_">nla_alloc_flow_actions</span><span class="params">(<span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sw_flow_actions</span> *<span class="title">sfa</span>;</span></span><br><span class="line"></span><br><span class="line">	WARN_ON_ONCE(size &gt; MAX_ACTIONS_BUFSIZE);</span><br><span class="line"></span><br><span class="line">	sfa = kmalloc(<span class="keyword">sizeof</span>(*sfa) + size, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!sfa)</span><br><span class="line">		<span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line">	sfa-&gt;actions_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> sfa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sw_flow_actions</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">	<span class="type">size_t</span> orig_len;	<span class="comment">/* From flow_cmd_new netlink actions size */</span></span><br><span class="line">	u32 actions_len;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> <span class="title">actions</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> sw_flow_actions) = <span class="number">0x20</span></span><br></pre></td></tr></table></figure>

<p>最终 <code>kmalloc</code> 大小为 <code>sw_flow_actions</code> 结构体的大小与 <code>new_acts_size</code> 的和；<br>② 回到漏洞函数，将传入的 <code>sfa-&gt;actions</code> 处的内容复制到新申请的 <code>acts-&gt;actions</code> 处；<br>③ 经过一些对 <code>acts</code> 的初始化，返回 <code>acts+next_offset</code>。</p>
<h2 id="copy-action"><a href="#copy-action" class="headerlink" title="copy_action"></a>copy_action</h2><p>通过 si 的 Relation，也能看到调用关系：</p>
<p><img src="/img/CVE-2022-2639/4.png"></p>
<p><code>copy_action</code> 函数中：</p>
<p><img src="/img/CVE-2022-2639/5.png"></p>
<p>返回值 <code>to</code> 即为 <code>acts + next_offset</code>，而 <code>acts</code> 的整个大小才为 0x8000+0x20，所以下面的 <code>memcpy</code> 即发生了堆越界写。 </p>
<p>但是由于对齐，内核并不会分配 0x8020 大小的 slab，而是分配了 0x10000 的 slab。 </p>
<p>根据参考文章中的描述，openvswitch 通过 netlink 进行通信（看源码目录和文件名也有发现）。根据 man pages 的描述：</p>
<blockquote>
<p>Netlink is used to transfer information between the kernel and user-space processes.  It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules.</p>
</blockquote>
<p>最初开发是为了克服 ioctl 的限制。例如，内核可以使用 netlink 接收变长的参数。几乎所有 Linux 网络管理都使用了 netlink，例如 iproute2 中的ip &#x2F; ss &#x2F; bridge。更多关于 Netlink 的东西后续整理好 CVE-2022-1015 的博客后直接挂个链接过去~~</p>
<p>这之中用到了名为 <code>nlattr</code> 的结构体：</p>
<p><img src="/img/CVE-2022-2639/6.png"></p>
<p>该结构体大小为4字节。len 字段为 <code>u16</code>，也就是此时 <code>nla_len</code> 最大为 0xffff，<code>memcpy</code> 的第二个参数 <code>from</code> 的 <code>payload</code> 最多就是 0xffff 字节。而前面的 <code>kmalloc</code> 的 slab 为 0x10000。并不能直接 oob write。</p>
<p>上面提到 openvswitch 模块使用 netlink 通信，那一定会先遵守 netlink 的通信约定（也就是一些数据结构的使用），即 netlink 的消息头：<code>nlmsghdr</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span> &#123;</span></span><br><span class="line">	__u32		nlmsg_len;	<span class="comment">// 整个消息的长度, 包括 Netlink 消息头本身</span></span><br><span class="line">	__u16		nlmsg_type;	<span class="comment">// 特定接口的消息类型</span></span><br><span class="line">	__u16		nlmsg_flags;<span class="comment">// 消息类型的额外信息</span></span><br><span class="line">	__u32		nlmsg_seq;	<span class="comment">/* Sequence number */</span></span><br><span class="line">	__u32		nlmsg_pid;	<span class="comment">/* Sending process port ID */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/7.png"></p>
<p>netlink 又有很多种类，在 netlink.h 中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_ROUTE		0	<span class="comment">/* Routing/device hook				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_UNUSED		1	<span class="comment">/* Unused number				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_USERSOCK	2	<span class="comment">/* Reserved for user mode socket protocols 	*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_FIREWALL	3	<span class="comment">/* Unused number, formerly ip_queue		*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_SOCK_DIAG	4	<span class="comment">/* socket monitoring				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_NFLOG		5	<span class="comment">/* netfilter/iptables ULOG */</span></span></span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_IP6_FW		13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_DNRTMSG		14	<span class="comment">/* DECnet routing messages */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_KOBJECT_UEVENT	15	<span class="comment">/* Kernel messages to userspace */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_GENERIC		16</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>openvswitch 属于 <code>NETLINK_GENERIC</code>。因此在 <code>struct nlmsghdr</code> 中还需要 <code>struct genlmsghdr</code>；在这后面才是真正传递给 openvswitch 的数据，也就是 <code>struct nlattr</code>。<strong>即 <code>struct nlmsghdr -&gt; struct genlmsghdr -&gt; struct nlattr</code> 三层数据结构</strong>。前面的漏洞位于拷贝 flow actions 的场景中，而 flow actions 又是主 <code>struct nlattr</code>中的一个子 <code>struct nlattr</code>。所以层层嵌套下来，最外层的 <code>nlattr</code> 的长度都不超过 0xffff，后面的子 <code>nlattr</code> 更不能达到溢出 0x10000 的要求。</p>
<h2 id="ovs-nla-copy-actions"><a href="#ovs-nla-copy-actions" class="headerlink" title="__ovs_nla_copy_actions"></a>__ovs_nla_copy_actions</h2><p>继续看 <code>copy_action</code> 的上层函数 <code>__ovs_nla_copy_actions</code>：</p>
<p><img src="/img/CVE-2022-2639/8.png"></p>
<p>其中有如下数组来描述每个 <code>ACTION attr</code> 的长度：</p>
<p><img src="/img/CVE-2022-2639/9.png"></p>
<p>根据注释， -1 表示变长，其他直接赋值的自然就是定长的了。对于定长的 <code>ACTION</code>，例如代码中的 <code>OVS_ACTION_ATTR_PUSH_MPLS、OVS_ACTION_ATTR_PUSH_VLAN</code> 等，只进行了一些简单的字段判断就跳出 switch，进入到 <code>copy_action</code> 中：</p>
<p><img src="/img/CVE-2022-2639/10.png"></p>
<p><img src="/img/CVE-2022-2639/11.png"></p>
<p>注意到这里有一个非常重要的标识：<code>skip_copy</code>，他在进入整个 switch 之前被赋值为 <code>false</code>。而在上述对如<code>OVS_ACTION_ATTR_PUSH_MPLS</code> 等定长 <code>ACTION</code> 的处理中，并未修改该值。而在处理其他赋值为 -1 即变长的<code>ACTION</code>中，会将其赋值为 <code>true</code>：</p>
<p><img src="/img/CVE-2022-2639/12.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ovs_ct_copy_action</span><span class="params">(<span class="keyword">struct</span> net *net, <span class="type">const</span> <span class="keyword">struct</span> nlattr *attr,</span></span><br><span class="line"><span class="params">		       <span class="type">const</span> <span class="keyword">struct</span> sw_flow_key *key,</span></span><br><span class="line"><span class="params">		       <span class="keyword">struct</span> sw_flow_actions **sfa,  <span class="type">bool</span> <span class="built_in">log</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ovs_conntrack_info</span> <span class="title">ct_info</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *helper = <span class="literal">NULL</span>;</span><br><span class="line">	u16 family;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line">	···</span><br><span class="line">	err = parse_ct(attr, &amp;ct_info, &amp;helper, <span class="built_in">log</span>);</span><br><span class="line">	···</span><br><span class="line">	err = ovs_nla_add_action(sfa, OVS_ACTION_ATTR_CT, &amp;ct_info,<span class="keyword">sizeof</span>(ct_info), <span class="built_in">log</span>);</span><br><span class="line">	···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>ovs_ct_copy_action</code> 中，<code>parse_ct</code> 中只需要 8 字节就能构造合法的 <code>nlattr</code>（或者更少？不确定）。而在下面的 <code>ovs_nla_add_action</code> 中，<code>add_action</code> 传入的结构体 <code>data</code> 和 <code>len</code> 分别是 <code>ovs_conntrack_info</code> 和该结构体的长度：</p>
<p><img src="/img/CVE-2022-2639/13.png"></p>
<p><img src="/img/CVE-2022-2639/14.png"></p>
<p>而在 kernel 5.13 中该结构体大小为 0xa0：</p>
<p><img src="/img/CVE-2022-2639/15.png"></p>
<p>也就是说当我们添加500个 <code>OVS_ACTION_ATTR_CT</code> 的 <code>nlattr</code>，那只用了 500*8 &#x3D; 0xFA0 字节的 <code>nlattr</code> 长度，却让我们最前面提到的 buffer 的 <code>next_offset</code> 成功增加了 0x500*0xa0 &#x3D; 0x13880 个字节。可以触发溢出。但是使用 <code>ovs_conntrack_info</code> 有个局限性，就是这个结构体在内核版本的更迭中被修改过多次，导致在不同版本的内核其大小并不固定。<strong>虽然不能直接使用，但至少提供了一个思路：通过 <code>add_action</code> 将 <code>next_offset</code> 指针向后移动，使其突破 0xffff 的限制。</strong></p>
<p>所以为了避免不通用的情况，再寻找有没有其他可用的 <code>ACTION_ATTR</code>（毕竟那么多呢）。可以找到<code>OVS_ACTION_ATTR_SET</code>：</p>
<p><img src="/img/CVE-2022-2639/16.png"></p>
<p>在 case 中并未对关键的 <code>skip_copy</code> 进行处理，但是将其传入了调用的函数中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">validate_set</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> nlattr *a,</span></span><br><span class="line"><span class="params">			<span class="type">const</span> <span class="keyword">struct</span> sw_flow_key *flow_key,</span></span><br><span class="line"><span class="params">			<span class="keyword">struct</span> sw_flow_actions **sfa, <span class="type">bool</span> *skip_copy,</span></span><br><span class="line"><span class="params">			u8 mac_proto, __be16 eth_type, <span class="type">bool</span> masked, <span class="type">bool</span> <span class="built_in">log</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> *<span class="title">ovs_key</span> =</span> nla_data(a);</span><br><span class="line">	<span class="type">int</span> key_type = nla_type(ovs_key);</span><br><span class="line">	<span class="type">size_t</span> key_len;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* There can be only one key in a action */</span></span><br><span class="line">	<span class="keyword">if</span> (nla_total_size(nla_len(ovs_key)) != nla_len(a))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	key_len = nla_len(ovs_key);</span><br><span class="line">	<span class="comment">// 传入 masked 为 false</span></span><br><span class="line">	<span class="keyword">if</span> (masked)</span><br><span class="line">		key_len /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (key_type &gt; OVS_KEY_ATTR_MAX ||</span><br><span class="line">		<span class="comment">// 注意这里有一个对 key_len 的检查</span></span><br><span class="line">	    !check_attr_len(key_len, ovs_key_lens[key_type].len))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (masked &amp;&amp; !validate_masked(nla_data(ovs_key), key_len))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (key_type) &#123;</span><br><span class="line">	···</span><br><span class="line">	<span class="comment">// 对该 type 的检查非常简单</span></span><br><span class="line">	<span class="keyword">case</span> OVS_KEY_ATTR_ETHERNET:</span><br><span class="line">		<span class="keyword">if</span> (mac_proto != MAC_PROTO_ETHERNET)</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	···</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Convert non-masked non-tunnel set actions to masked set actions. */</span></span><br><span class="line">	<span class="keyword">if</span> (!masked &amp;&amp; key_type != OVS_KEY_ATTR_TUNNEL) &#123;</span><br><span class="line">            <span class="comment">// ！！！ 注意此时的 len = key_len * 2</span></span><br><span class="line">            <span class="type">int</span> start, len = key_len * <span class="number">2</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> *<span class="title">at</span>;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// ！！！</span></span><br><span class="line">            *skip_copy = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            start = add_nested_action_start(sfa,</span><br><span class="line">                                            OVS_ACTION_ATTR_SET_TO_MASKED,</span><br><span class="line">                                            <span class="built_in">log</span>);</span><br><span class="line">            <span class="keyword">if</span> (start &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> start;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用__add_action，传入的len为key_len两倍</span></span><br><span class="line">            at = __add_action(sfa, key_type, <span class="literal">NULL</span>, len, <span class="built_in">log</span>);</span><br><span class="line">            <span class="keyword">if</span> (IS_ERR(at))</span><br><span class="line">                <span class="keyword">return</span> PTR_ERR(at);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>(nla_data(at), nla_data(ovs_key), key_len); <span class="comment">/* Key. */</span></span><br><span class="line">            <span class="built_in">memset</span>(nla_data(at) + key_len, <span class="number">0xff</span>, key_len);    <span class="comment">/* Mask. */</span></span><br><span class="line">            <span class="comment">/* Clear non-writeable bits from otherwise writeable fields. */</span></span><br><span class="line">            <span class="keyword">if</span> (key_type == OVS_KEY_ATTR_IPV6) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">ovs_key_ipv6</span> *<span class="title">mask</span> =</span> nla_data(at) + key_len;</span><br><span class="line"></span><br><span class="line">                mask-&gt;ipv6_label &amp;= htonl(<span class="number">0x000FFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            add_nested_action_end(*sfa, start);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设我们内部嵌套的 <code>nlattr type</code>为 <code>OVS_KEY_ATTR_ETHERNET</code>，首先要通过前面提到的 <code>key_len</code> 的检查，即 <code>key_len</code> 等于 sizeof(struct ovs_key_ethernet) &#x3D; 1<em>2</em>6 &#x3D; 0xc：</p>
<p><img src="/img/CVE-2022-2639/17.png"></p>
<p><img src="/img/CVE-2022-2639/18.png"></p>
<p><img src="/img/CVE-2022-2639/19.png"></p>
<p>算上添加这个 <code>nlattr</code> 所需的两层 header（嵌套），即需要使用 0x04 + 0x04 + 0x0C &#x3D; 0x14 字节的内存就让最前面提出的 <code>next_offset</code> 的指针前进 0x04 + 0x04 + 0x0C * 2 &#x3D; 0x20 字节。虽然放大比例不如 <code>sizeof(struct ovs_conntrack_info)</code>，但好在其在能用来溢出的前提下，保证了更优的稳定性（无需根据内核版本来计算结构体的大小且粒度较小，溢出写会更精确）。<br>最后在回到 <code>copy_action</code> 中，<code>memcpy</code> 的时候就会产生溢出。也就是第二次拷贝剩余的 <code>nlattr</code> 时（第一次是对前面 <code>OVS_ACTION_ATTR_SET</code> 推动 <code>next_offset</code> 的操作）。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://bsauce.github.io/2022/07/16/CVE-2022-1015/#3-4-%E9%80%9A%E8%BF%87netlink%E4%B8%8Enftables-%E4%BA%A4%E4%BA%92">[1] bsauce CVE-2022-1015</a></p>
<p><a href="https://bsauce.github.io/2022/11/24/CVE-2022-2639/">[2] bsauce CVE-2022-2639</a></p>
<p><a href="https://veritas501.github.io/2022_10_18-CVE-2022-2639%20%20openvswitch%20LPE%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">[3] CVE-2022-2639 openvswitch LPE 漏洞分析</a></p>
]]></content>
      <categories>
        <category>cve 复现</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>cve</tag>
      </tags>
  </entry>
</search>
